
Converting Annotations Tutorial: Wiring up back and frontend
{"Body": " <p id=\"1\" style=\" \">In the last segment of our per-paragraph commenting app using Django, let us now wire the backend up with our frontend.</p>\n\n<p id=\"2\" style=\" \">Our form was made <a href=\"/C/course/computer-science/django/annotations-tutorial-user-form-and-annotation-sorting/17/\" target=\"_blank\">long ago</a> and we just finished <a href=\"/C/course/computer-science/django/annotations-tutorial-doing-it-with-django-rest-framework/22/\" target=\"_blank\">coding the backend</a> for this feature. Now all we have to do is plug the wires in right places and our entire app should be ready to use.</p>\n\n<p id=\"3\" style=\" \">Django forms need a CSRF Token to prevent cross site scripting. This token can be retrieved by two methods: By using the <code>{% csrf_token %}</code> template tags when the form is being rendered from the backend. Or, the same CSRF token and also available in the Site cookie. Since we are not rendering any forms from the backend, the latter is our preferred method. So, we just use the function available on Django Documentation Page:</p>\n\n<pre class=\"brush: js\">var getCookie = function(name){\n      var cookieValue = null;\n      if (document.cookie &amp;&amp; document.cookie != '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i &lt; cookies.length; i++) {\n          var cookie = jQuery.trim(cookies[i]);\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) == (name + '=')) {\n            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n            break;\n          }\n        }\n      }\n      return cookieValue;\n      };\n</pre>\n\n<p id=\"4\" style=\" \">Now again, this CSRF token can be sent as a part of our actual payload, or in the request headers. Since sending it beforehand keeps my data formatting neat and clean, I'll do that. For that, we also need to tell that a CSRF token is not required for a few operations (like GET). To tell that:</p>\n\n<pre class=\"brush: js\">  var csrfSafeMethod = function(method) {\n    // these HTTP methods do not require CSRF protection\n    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));\n  };\n</pre>\n\n<p id=\"5\" style=\" \">Now, we can replace our fixture we created before with the following Ajax call:</p>\n\n<pre class=\"brush: js\">  data = {\n    body: body,\n    paragraph: id,\n    content_type: \"9\",\n    object_id: \"1\",\n    privacy: \"3\",\n    privacy_override:\"0\",\n    shared_with: [],\n    };\n\n/* POST it now! */\n//Form Validation goes here....\n$.ajaxSetup({\n  beforeSend: function(xhr, settings) {\n    if (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) {\n      xhr.setRequestHeader(\"X-CSRFToken\", annotations.csrftoken);\n    }\n  }\n});\n//Save Form Data........\n$.ajax({\n  cache: false,\n  url : \"http://127.0.0.1:8000/annotations/annotations/\",\n  type: \"POST\",\n  dataType : \"json\",\n  contentType: \"application/json;\",\n  data : JSON.stringify(data),\n  context : this,\n  success : renderSingleAnnotation,\n  error : function (xhRequest, ErrorText, thrownError) {\n                //alert(\"Failed to process annotation correctly, please try again\");\n                console.log('xhRequest: ' + xhRequest + \"\\n\");\n                console.log('ErrorText: ' + ErrorText + \"\\n\");\n                console.log('thrownError: ' + thrownError + \"\\n\");\n              }\n});        \n</pre>\n\n<p id=\"6\" style=\" \">Here, we create a dictionary of our data, which we will stringify before sending it to the backend. (Though I am told that <code>.ajax()</code> method does it implicitly, I haven't yet tried it and hence, I don't know; I know, I know, it doesn't take much time!).</p>\n\n<p id=\"7\" style=\" \">Now, if the request is successful, the <code>renderSingleAnnotation()</code> method will be called. This is where I had trumped up a bit. If you remember, I had originally designed <code>renderAnnotations()</code> to take care of this, but then, while testing the functionality, which was failing obviously, I realized that when a single object is being returned, it is not a single element in the list; there is no list. Hence, to make our <code>renderAnnotations()</code> method more usable, this <code>renderSingleAnnotation()</code> just takes the incoming data, and puts it in a list before passing it to the <code>renderAnnotation</code> method.</p>\n\n<p id=\"8\" style=\" \"><em>Not quite!</em> While annotations were posting well and good, and console said the response was also good, (except of course, we were not passing in the <code>shared_with</code> data, which would have caused the <code>400 BAD REQUEST</code> response), the annotations made were not being made visible on the page but only on subsequent reload. A quick examination of our <code>renderAnnotations</code> function shows that we are operating on a variable called <code>annotationCopy</code> (which was initially the clone of our container). We originally had created a clone of our content container, and then replaced it with the formatted version after we were done processing. Now, that object does not exist. So, what we can do is, reset the variable and if it has been reset, reinitialize it in the function itself. This code segment:</p>\n\n<pre class=\"brush: js\">  currentObject = annotationCopy.children('[data-section-id=\"'+data[i]['paragraph']+'\"]');\n</pre>\n\n<p id=\"9\" style=\" \">does not do its job properly. We can fix it simply, by finding our element again, before we get here. So, before our <code>for</code> loop we add the following code:</p>\n\n<pre class=\"brush: js\">if (annotationCopy == null){\n  /* Create a fresh copy of the variable*/\n  console.log('It is null. Make a new one');\n  annotationCopy = $('#commentable-container');\n  console.log(annotationCopy);\n}\n</pre>\n\n<p id=\"10\" style=\" \">And when does it become NULL? Once the clone has been put into its right place.</p>\n\n<pre class=\"brush: js\">loadAnnotations();\n$('#commentable-container').replaceWith(annotationCopy);\nannotationCopy = null;\n</pre>\n\n<p id=\"11\" style=\" \">Also put the variable back to sleep once we are done rendering new annotations, by setting it to null at the end of <code>renderAnnotation</code>.</p>\n\n<p id=\"12\" style=\" \">Now, our annotations load just fine, and we are also able to create new one. Obviously, we haven't checked if the user is allowed to post them, but that can be easily implemented. So, it is homework for you for the time being. (look at the available URLs in REST and you'll find a link to fetch data about current user. If the user id is 0, then the user is not logged in, hence, disable posting of comments.) Also, our backend takes care of that for a while, it throws back a <code>FORBIDDEN</code>. Its just that error handling must be done on the front end.</p>\n\n<p id=\"13\" style=\" \">With that done, we'd also like to give the user ability to delete his own annotations. Now, we could bind a delete method to the close button on each container (which we will just create) when it renders.</p>\n\n<p id=\"14\" style=\" \">So, how would we like that? I think I'd like the cross button to appear on the side of an annotation when we hover on top of it. Though, it sounds good (and hence we will implement it), it is poor design in a way that it is not cross platform compliant. The mobile devices do not have a <code>:hover</code> option yet. And continuously visible cross buttons don't sound too appealing to me. So, we could put a button textual link and that hovering button also.</p>\n\n<p id=\"15\" style=\" \">Add the following to the comments body in the script to add the delete method for annotations:</p>\n\n<pre class=\"brush: js\">  '&lt;div class=\"comments-control-box\"&gt;'+\n  '&lt;span class=\"comments-control comments-delete\"&gt;Delete&lt;/span&gt;'+\n  '&lt;span class=\"comments-control\"&gt;Shared with&lt;/span&gt;'+\n  '&lt;/div&gt;'+\n  '&lt;span class=\"comments-delete glyphicon glyphicon-remove\"&gt;&lt;/span&gt;'+\n</pre>\n\n<p id=\"16\" style=\" \">Bind a delete method to each button. But for that, we'll need to keep its ID somewhere. I don't want to use a hidden span for this, and hence would use the <code>data-xxx</code> attribute:</p>\n\n<pre class=\"brush: js\">  currentComment.find('.comments-delete').attr('data-comment-id', data[i]['id']);\n  currentComment.find('.comments-delete').on('click', deleteAnnotation);\n</pre>\n\n<p id=\"17\" style=\" \">The <code>deleteAnnotation()</code> method is:</p>\n\n<pre class=\"brush: js\">var deleteAnnotation = function(id){\n  id= parseInt($(this).attr('data-comment-id'));\n  console.log('Deleting annotation' + id);\n  $.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n      if (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) {\n        xhr.setRequestHeader(\"X-CSRFToken\", annotations.csrftoken);\n      }\n    }\n});\n\n//Save Form Data........\n$.ajax({\n  cache: false,\n  url : \"http://127.0.0.1:8000/annotations/annotations/\"+id+\"/\",\n  type: \"DELETE\",\n  dataType : \"json\",\n  contentType: \"application/json;\",\n  //data : JSON.stringify(data),\n  context : this,\n  success : removeAnnotation,\n  error : function (xhRequest, ErrorText, thrownError) {\n          //alert(\"Failed to process annotation correctly, please try again\");\n          console.log('xhRequest: ' + xhRequest + \"\\n\");\n          console.log('ErrorText: ' + ErrorText + \"\\n\");\n          console.log('thrownError: ' + thrownError + \"\\n\");\n          }\n});  \n\n/* Update annotation count on adjoining container */\nconsole.log($(this).closest('.comments').find('.comments--toggle p'));\ncommentCount = parseInt($(this).closest('.comments').find('.comments--toggle p').text());\nconsole.log('Comment Count now is '+ commentCount);\nif((commentCount -1)==0){\n  $(this).closest('.comments').find('.comments--toggle p').text('+');\n}\nelse{\n  $(this).closest('.comments').find('.comments--toggle p').text(commentCount -1);\n}\n/* Remove the annotation from flow */\n$(this).closest('.comments-container-item').remove();\n};\n</pre>\n\n<p id=\"18\" style=\" \">Here, we are going to remove it from the flow once Ajax call is made. In case some validation is to be run, it must be done before that. In case error occurs (which mustn't if the code is well tested), the comment will reappear on next refresh. What we could have done is saved the object in some global variable and when we received a successful response, do this removal there. But for now, we'll let it be this way. The <code>removeAnnotation</code> method doesn't do anything for now.</p>\n\n<p id=\"19\" style=\" \">The styles:</p>\n\n<pre class=\"brush: sass\">.comments-control-box{\n  position: relative;\n  font-size: 0.9rem;\n  }\n.comments-delete{\n  position: absolute;\n  top: 0;\n  right: 0;\n  height: 20px;\n  width: 20px;\n  display: none;\n  font-size: 1.2rem;\n  }\n</pre>\n\n<p id=\"20\" style=\" \">This does it!</p>\n\n<p id=\"21\" style=\" \">Creating annotations from a different user also works fine. They are neatly tucked in under the button. I hope your's is also working just the same. Here's a snapshot of how it looks on my screen.</p>\n\n<p class=\"text-center\" id=\"22\" style=\" \"><img alt=\"Annotations App, finished screenshot\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/12/annotations_12_1.png\" style=\" \"/></p>\n\n<p id=\"23\" style=\" \">We'll for now, disallow the <code>shared_with</code> privacy option and only allow 'private and public' because writing code for the other things would involve a little more of backend. So, we'll save that for another day. (i.e. after we have put social networks into our apps). But you can always do it, and send us a pull request. The intimation to the author for now, can simply be done using signals (and sending an email to him). Later, we'll need a more elaborate dispatcher with tunable privacy and subscription settings.</p>\n\n<hr/>\n<p id=\"24\" style=\" \"><strong>Concluding remarks</strong></p>\n\n<p id=\"25\" style=\" \">With this, we come to the end of our per-paragraph commenting app tutorials. I hope you had fun. Since I am relatively a newbie into this stuff, I had fun, frustration and everything. But I'd like to take it further from here too, and make it more usable, pythonic and elegant. The source code is available under open source license on <a href=\"https://github.com/PirateLearner/annotations\" target=\"_blank\">github</a> and the package is available on <a href=\"https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;name=pi-annotations\" target=\"_blank\">PyPi</a> where you can install it by simply calling <code>pip install pi-annotations</code>. I encourage you to report in bugs, fork the repository on github to develop features into it, enhance it (and send me a merge request). Also, I understand that the tutorial is fairly long, and there are many areas where we could improve upon. But we won't know until you tell us what you do not understand in what was written. So, you could send in your suggestions via <a href=\"/contact/?contact_type=Feature\" target=\"blank\">email</a>, on our <a href=\"https://www.facebook.com/PirateLearner\" target=\"_blank\">Facebook page</a>, in the <a href=\"https://www.facebook.com/groups/piratelearner/\" target=\"_blank\">Facebook group</a>, on <a href=\"https://twitter.com/PirateLearner\" target=\"_blank\">twitter</a> and <a href=\"https://plus.google.com/b/116465481265465787624/+PiratelearnerOfficial\" target=\"_blank\">Google Plus</a>, or use the annotations app here itself and let us know. We will improve upon it. :-)</p>\n", "pid_count": " 25"}


Converting Annotations Tutorial: Doing it with Django-Rest Framework
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this part of our per-paragraph commenting app, we will build the AJAX API using Django-Rest-Framework, rather than reinventing a major part of the wheel with Django's inbuilt support for serializing and deserializing data.</p>\n\n<hr/>\n<p id=\"2\" style=\" \">So, having developed a very simple Ajax request handler in our <a href=\"/C/course/computer-science/django/annotations-tutorial-moving-towards-ajax-apis/21/\" target=\"_blank\">previous tutorial</a>, we now delve into Django REST framework and use it to develop our app's REST API before we finally hook it up to the front end. Long way, huh? Sorry.</p>\n\n<p class=\"text-center\" id=\"3\" style=\" \"><img alt=\"Django Rest Framework\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/12/annotations_11_1.png\" style=\" \"/><small><a href=\"http://www.django-rest-framework.org/img/logo.png\" target=\"_blank\">(Image Credits)</a></small></p>\n\n<p id=\"4\" style=\" \">Here is what we'll do... or before that, I think it would benefit if you read the tutorials on DRF <a href=\"http://www.django-rest-framework.org/\" target=\"_blank\">here</a>. For now, I'm implicitly using their terminology pretending that you and I fully understand what it means, just like while making cake we talk about bread, even when bread is made of what, yeast, and grain?</p>\n\n<p id=\"5\" style=\" \">So, we'll first create serializers for the models we wish to expose. These will be:</p>\n\n<ol id=\"6\">\n\t<li>Users</li>\n\t<li>Annotations</li>\n\t<li>Blog Content (on which annotations were made)</li>\n</ol>\n\n<p id=\"7\" style=\" \">Then, we'll write/modify our views to support the queries and test them. Serializers are like Forms in Django and more or less the same kind of easy or difficult depending on how you find forms.</p>\n\n<p id=\"8\" style=\" \">Okay, lets go:</p>\n\n<p id=\"9\" style=\" \"><strong>We first define very straightforward serializers using model Serializers.</strong> These create serializers like ModelForms created forms for our Data Models implicitly, but again, if you don't get it, please read their documentation first. Christie has done a fine job in documenting most relevant things in the form of a neat tutorial:</p>\n\n<pre class=\"brush: python\">from rest_framework import serializers\nfrom annotations.models import Annotation\nfrom blogging.models import BlogContent\nfrom django.contrib.auth.models import User\n\nclass BlogContentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BlogContent\n        fields =('id', 'title', 'create_date', 'data', 'url_path', \n                'author_id', 'published_flag', 'section', 'content_type',\n                'tags',)\n\nclass AnnotationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Annotation\n        fields = ('content_type', 'object_id', 'id',  'date_created', 'date_modified','content_object',\n                    'body', 'paragraph', \n                    'author', 'shared_with',\n                    'privacy', 'privacy_override', )       \n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'first_name', 'last_name')\n</pre>\n\n<p id=\"10\" style=\" \">Now, let us try to get an instance of <code>annotations</code> and parse it. The good thing about Unit Tests is that I can do the python shell stuff there, in a unit test while I am tinkering with code, and make it grow as a test, without having to type the same thing in the shell again and again. So, that saves much time.</p>\n\n<p id=\"11\" style=\" \">Also, I'd like to fix up those fixtures in every test so, I've separated out the <code>setUp()</code> and <code>tearDown</code> into a base class which all other test classes in this case can inherit.</p>\n\n<pre class=\"brush: python\">class TestAnnotations(TestCase):\n    fixtures = ['fixtures.json',]\n    def setUp(self):\n        self.user = User.objects.get(username=\"craft\")\n    \n    def tearDown(self):\n        pass\n</pre>\n\n<p id=\"12\" style=\" \">The test is as:</p>\n\n<pre class=\"brush: python\">from annotations.serializers import AnnotationSerializer\nfrom rest_framework.renderers import JSONRenderer \n\nclass TestSerializers(TestAnnotations):\n    def test_create_serializer_class(self):\n        annotation = Annotation()\n        annotation.content_type=ContentType.objects.get(model='blogcontent', app_label=\"blogging\")\n        annotation.object_id= str(1)\n        annotation.body=\"This is a test annotation\"\n        annotation.paragraph=\"1\"\n        annotation.author= User.objects.get(id=1)\n        annotation.save()\n        obj = AnnotationSerializer(annotation)\n        print(obj.data)\n        json = JSONRenderer().render(obj.data)\n        print json\n</pre>\n\n<p id=\"13\" style=\" \">Running the tests gives:</p>\n\n<pre class=\"brush: bash\">TypeError: &lt;BlogContent: I have a dream by Martin Luther King&gt; is not JSON serializable\n</pre>\n\n<p id=\"14\" style=\" \">Hurrah! You know, I like <i>segmentation faults</i> in C while development, and <i>Exceptions</i> in python for they tell exactly where things went wrong. So, it says that the <code>content_object</code> is not serializable. That is true. For that, we need to tell the <code>BlogContent</code> serializer of the relationship from <code>annotations</code>:</p>\n\n<p id=\"15\" style=\" \">Adding to <code>BlogContentSerializer</code> and rerunning the tests:</p>\n\n<pre class=\"brush: bash\">annotation = serializers.RelatedField(many=True)\nAssertionError: Relational field must provide a `queryset` argument, or set read_only=`True`.\n</pre>\n\n<p id=\"16\" style=\" \">No, no, nom nom nom! Err, is that what we want? Remove it for now. What we want is a JSON representation of <code>BlogContent</code> Field when we are fetching annotations. So, lets stick to that. The <code>BlogContent</code> object is the '<code>content_object</code>' field. So, whatever has to be done has to be done <em>IN</em> the annotations serializer.</p>\n\n<p id=\"17\" style=\" \">I was never baptised into OOPs. Consequently, I never understood it natively. I understand the concept more or less from a C-Oriented perspective but some things have always confused me. For example, why does 'over-riding' a function work (<em>vtables</em>?)? So, I tried to imagine what might be happening behind the scenes in that scenario. Why do we need that? Because, we need to modify the behaviour of how a serialized value can be passed into <code>content_object</code> field, when it is passing an instance?</p>\n\n<p id=\"18\" style=\" \">So, consider this:</p>\n\n<p id=\"19\" style=\" \">A class may be visualized as a cluster of related attributes and methods (which in turn are attributes, except that they can do something). So, ultimately, all methods as well as attributes are represented as a single place in memory. The function just take larger space and the system/compiler implicitly does not know what or how to do something with them. What it does know is that they are composite data-types, made up of semantics, operations and interpretations that a compiler <em>does</em> understand. So, if we say '<code>int a</code>', the compiler knows how to interpret it. It knows that it must read 4 bytes at once (in most cases). If we say <code>a = 2+3</code>, the compiler knows what to do with that '<code>+</code>'. But if we said '<code>a= addition(1,2)</code>', compiler would not implicitly know. All it knows is to plough through to find out. It would start at the memory position where <code>addition(c,d)</code> resides and move forward, trying to see if it understands something. It would encounter '<code>sum=c+d</code>' and it would know what to do with it. When it would see '<code>return sum</code>', it would know what '<code>return</code>' means. In this way, for a compiler/interpreter, function is also a big variable, or rather, chunk of interpreted simpler instructions. Now, say I wrote:</p>\n\n<pre class=\"brush: python\">    a= addition(1,2)\n</pre>\n\n<p id=\"20\" style=\" \">and then, somewhere down the line I wrote</p>\n\n<pre class=\"brush: python\">    a=subtraction(3,5)\n</pre>\n\n<p id=\"21\" style=\" \">It would just be valid. Now, suppose that I made the <code>a=addition(1,2)</code> implicit, by putting it in a class, and then while inheriting the class, I wrote <code>a=subtraction(3,5)</code> in the descendant class, it would mean just the same thing. So <em>THAT</em> as it appeals to me, is what happens when we '<em>inherit</em>' a class and override its method or an attribute's value. There are ofcourse many other things going on, or else, how would <code>super()</code> work, but it is just for understanding how it works in a rudimentary fashion.</p>\n\n<p id=\"22\" style=\" \">Thus, while we inherited the <code>ModelSerializer</code>, which gave the '<code>content_object</code>' a <code>RelatedField()</code> class, we can, in our class, override how 'content_object' behaves. So, what we want to achieve is, to get a serialized value here (to rid ourselves of the error). So, we define a new class, which inherits the <code>RelatedField</code> class, and override the default method:</p>\n\n<pre class=\"brush: python\">from rest_framework.fields import ReadOnlyField\n\nclass SerializeReadOnlyField(ReadOnlyField):\n    def to_representation(self, value):\n        if isinstance(value, BlogContent):\n        return BlogContentSerializer(value).data\n</pre>\n\n<p id=\"23\" style=\" \">Here, we check that if the passed object is an instance of <code>BlogContent</code>, then return its serialized value. If annotation can be plugged on other types, their cases would have to be added in here.</p>\n\n<p id=\"24\" style=\" \">And then, we alter the <code>AnnotationSerializer</code> class:</p>\n\n<pre class=\"brush: python\">class AnnotationSerializer(serializers.ModelSerializer):\n    content_object = SerializeReadOnlyField() \n    class Meta:\n        model = Annotation\n        fields = ('content_type', 'object_id', 'id',  'date_created', 'date_modified','content_object',\n        'body', 'paragraph', \n        'author', 'shared_with',\n        'privacy', 'privacy_override', )   \n</pre>\n\n<p id=\"25\" style=\" \">Running the tests again gives:</p>\n\n<pre class=\"brush: bash\">TypeError: &lt;taggit.managers._TaggableManager object at 0x7fc9c506d4d0&gt; is not JSON serializable\n</pre>\n\n<p id=\"26\" style=\" \">That's progress! Also, we got the full Content object serialized. But if we go on like this, we don't know where it would end. (Or we could just not fetch Tags). But even then, it sounds stupid that for a small annotation, complete content object is returned. As a relation, we would need at the maximum, its Primary Key, or a hyperlink to it.</p>\n\n<p id=\"27\" style=\" \">So, we could do the hyperlink part, by using the <code>get_absolute_url()</code> method of <code>BlogContent</code> passes our tests.</p>\n\n<pre class=\"brush: python\">class SerializeReadOnlyField(ReadOnlyField):\n    def to_representation(self, value):\n        if isinstance(value, BlogContent):\n        return value.get_absolute_url()\n</pre>\n\n<p id=\"28\" style=\" \">But then, we can do better, let REST handle it within REST itself. We may switch back later (this new method will be very useful when complete projects are based on DRF rather than a mixture of each). So, we will use HTML Serializers instead of Model Serializers. But for that, we'll need a view, and we haven't written any, yet.</p>\n\n<p id=\"29\" style=\" \">Now, because I said that I'll assume that you have read the tutorial on Django Rest Framework, I am going to play that assumption here and cut to the chase here in the views. We'll be using <code>ViewSets</code>.</p>\n\n<p id=\"30\" style=\" \">We'd want to use some ready made functions for <code>User</code> objects, and <code>BlogContent</code> objects because we don't want to use them yet in a way to create them, but as read-only or relation fields. Now, to do that, Django Rest Framework needs to have a view for each (for URLs).</p>\n\n<pre class=\"brush: python\">class UserViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    This viewset automatically provides `list` and `detail` actions.\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\nclass BlogContentViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    This viewset automatically provides `list`, `create`, `retrieve`,\n    `update` and `destroy` actions.\n    \"\"\"\n    queryset = BlogContent.objects.all()\n    serializer_class = BlogContentSerializer\n    permission_classes = (permissions.IsAuthenticatedOrReadOnly,\n                                                IsOwnerOrReadOnly,)\n    def pre_save(self, obj):\n    obj.author_id = self.request.user\n\nclass AnnotationViewSet(viewsets.ModelViewSet):\n    queryset = Annotation.objects.all()\n    serializer_class = AnnotationSerializer\n    permission_classes = (permissions.IsAuthenticatedOrReadOnly, AnnotationIsOwnerOrReadOnly,)\n    \n    def pre_save(self, obj):\n        obj.user = self.request.user\n</pre>\n\n<p id=\"31\" style=\" \">And we would like to use the browsable API for REST to see things on the page. For that, we'd be using the <code>URL router</code>, and a REST API Homepage. In views, add:</p>\n\n<pre class=\"brush: python\">@api_view(('GET',))\n#If not set, the API root will assert for not having appropriate permissions.\n@permission_classes((permissions.IsAuthenticatedOrReadOnly, ))\ndef api_root(request, format=None):\n    return Response({\n        'blogcontent': reverse('annotations:blogcontent-list', request=request, format=format),\n        'user': reverse('annotations:user-list', request=request, format=format),\n        'annotations': reverse('annotations:annotation-list', request=request, format=format),\n        'currentUser': reverse('annotations:current-user', request=request, format=format),            \n        })\n</pre>\n\n<p id=\"32\" style=\" \">Here, we are providing <strong>URL links for 4 types of requests</strong>:</p>\n\n<ol id=\"33\">\n\t<li>For browsing blogcontent</li>\n\t<li>For browsing users</li>\n\t<li>For seeing the current user</li>\n\t<li>For manipulating/browsing annotations</li>\n</ol>\n\n<p id=\"34\" style=\" \">For now, our REST API Root resides in the annotations App itself. In a bigger ecosystem, I'd break out the REST methods to their respective apps.</p>\n\n<p id=\"35\" style=\" \">In annotations/urls.py add:</p>\n\n<pre class=\"brush: python\">from annotations.views import (\n                    BlogContentViewSet, UserViewSet, AnnotationViewSet, \n                    BlogContentCommentView, CurrentUserView,\n                    api_root)\n\nblogcontent_list = BlogContentViewSet.as_view({\n                    'get': 'list'                                           \n                    })\nblogcontent_detail = BlogContentViewSet.as_view({\n                    'get': 'retrieve',\n                    })\nuser_list = UserViewSet.as_view({\n                    'get': 'list'\n                    })\nuser_detail = UserViewSet.as_view({\n                    'get': 'retrieve'\n                    })\nannotation_list = AnnotationViewSet.as_view({\n                    'get': 'list',\n                    'post': 'create'\n                    })\nannotation_detail = AnnotationViewSet.as_view({\n                    'get': 'retrieve',\n                    'put': 'update',\n                    'patch': 'partial_update',\n                    'delete': 'destroy'\n                    })\n</pre>\n\n<p id=\"36\" style=\" \">Here, we take advantage of auto-creating views from classes for readonly purposes in <code>BlogContent</code> and in <code>Users</code>, but add other REST methods for annotations App.</p>\n\n<p id=\"37\" style=\" \">In the URL patterns, add:</p>\n\n<pre class=\"brush: python\">    url(r'^blogcontent/$', blogcontent_list, name='blogcontent-list'),\n    url(r'^blogcontent/(?P&lt;pk&gt;[0-9]+)/$', blogcontent_detail, name='blogcontent-detail'),\n    url(r'^blogcontent/(?P&lt;pk&gt;[0-9]+)/comments/$', BlogContentCommentView.as_view(), name='blogcontent-comments'),\n    url(r'^users/$', user_list, name='user-list'),\n    url(r'^users/current/$', CurrentUserView.as_view(), name='current-user'),\n    url(r'^users/(?P&lt;pk&gt;[0-9]+)/$', user_detail, name='user-detail'),\n    url(r'^annotations/$', annotation_list, name='annotation-list'),\n    url(r'^annotations/(?P&lt;pk&gt;[0-9]+)/$', annotation_detail, name='annotation-detail'),\n    url(r'^rest/$', api_root),\n</pre>\n\n<p id=\"38\" style=\" \">And, don't forget to add the '<code>rest_framework</code>' app into your <code>INSTALLED_APPS</code>. If you have not synced your DB so far, do it once by:</p>\n\n<pre class=\"brush: bash\">python manage.py syncdb\n</pre>\n\n<p id=\"39\" style=\" \">and start the dev server by:</p>\n\n<pre class=\"brush: bash\">python manage.py runserver\n</pre>\n\n<p id=\"40\" style=\" \">Visit <code>127.0.0.1:8000/annotations/rest</code> to view your REST homepage. If everything went fine, it should show you 4 links, to the ones we had written in the <code>api_root</code> view.</p>\n\n<p id=\"41\" style=\" \">To add login support, put this URL pattern in the main project URL file:</p>\n\n<pre class=\"brush: python\">url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n</pre>\n\n<p id=\"42\" style=\" \">If you do login, you will see that an input form appears only for annotations, and not for any other hyperlink. So far so good.</p>\n\n<p id=\"43\" style=\" \">Now, let us write some tests about this. As a general rule, we are not supposed to test other module. So, we will be testing our module's functionality rather than REST framework's. So far, we haven't written much of our own functionality, and have been piggybacking REST framework's functionality. So, what do we test about it? All we can do is test our paths, the expected outputs and failures. So, the teeny weeny 'tests' that we've been writing for REST framework are not really tests (if you look at them), but just a convenience while exploring the framework.</p>\n\n<p id=\"44\" style=\" \">Erm, this tags is still going to be a nuisance, lets remove it from the serializer fields for now, we are not making <code>BlogContent</code> REST API right now. So, lets stick with the minimal functionality rule.</p>\n\n<p id=\"45\" style=\" \">However, you will observe that the <code>shared_with</code> field is not being displayed in the Web API interface. That is because it is a <code>ManyToMany</code> Field and by default, it is set to ReadOnly in DRF. However, we don't want it such.</p>\n\n<blockquote>The serializer attribute names for foreign keys MUST be the same as their related names or Django will keep throwing an error saying that the field is not a part of the model.</blockquote>\n\n<p id=\"46\" style=\" \">Also note, that for Foreign Keys, when we are specifying '<code>related_name</code>' attribute, the serializer attribute too must be named the same, or else, it won't work! I spent many hours confused about why was it happening until I just tried out using the same name in the serializer as was given in the model as its <code>related_name</code>.</p>\n\n<p id=\"47\" style=\" \">The Annotation Serializer needs some rework, for it uses two patterns that are not 'regular'. First, it uses a <code>manyToMany</code> field relationship, and second, it is a generic foreign key, which again is a custom manager. So, we cannot use a <code>ViewSet</code> for it:</p>\n\n<pre class=\"brush: python\">class AnnotationSerializer(serializers.ModelSerializer):\n    #I want the content object is a hyperlink to the ContentObject\n    content_object = SerializeReadOnlyField()\n    shared_with = serializers.PrimaryKeyRelatedField(many=True, read_only=False, queryset=User.objects.all())\n    author = serializers.ReadOnlyField(source='author.username')\n    \n    class Meta:\n        model = Annotation\n        fields = ('content_type', 'object_id', 'id',  'date_created', 'date_modified','content_object',\n                'body', 'paragraph', \n                'author', 'shared_with',\n                'privacy', 'privacy_override', )  \n    \n    def create(self, validated_data):\n        print \"In create\"\n        print validated_data\n        \n        annotation = Annotation()\n        annotation.author = validated_data.get('author')\n        annotation.body = validated_data.get('body')\n        annotation.content_type = validated_data.get('content_type')\n        annotation.object_id = validated_data.get('object_id')\n        annotation.paragraph = validated_data.get('paragraph')\n        annotation.privacy = validated_data.get('privacy')\n        annotation.privacy_override = validated_data.get('privacy_override', False)\n        \n        #Get row from contentType which has content_type\n        content_object = ContentType.objects.get_for_id(annotation.content_type.id)\n        annotation.content_object = content_object.model_class().objects.get(id=annotation.object_id)\n        print annotation.content_object          \n        annotation.save()\n        \n        print validated_data.get('shared_with')\n        for user in validated_data.get('shared_with'):\n        sharing = AnnotationShareMap(annotation=annotation, \n        user=user)\n        sharing.save()\n        \n        return annotation\n    \n    def update(self, instance, validated_data):\n        print \"In update\"\n        \n        annotation = instance\n        annotation.author = validated_data.get('author', annotation.author)\n        annotation.body = validated_data.get('body', annotation.body)\n        annotation.content_type = validated_data.get('content_type',annotation.content_type)\n        annotation.object_id = validated_data.get('object_id',annotation.object_id)\n        annotation.paragraph = validated_data.get('paragraph',annotation.paragraph)\n        annotation.privacy = validated_data.get('privacy',annotation.privacy)\n        annotation.privacy_override = validated_data.get('privacy_override',annotation.privacy_override)\n        \n        #Get row from contentType which has content_type\n        content_object = ContentType.objects.get_for_id(annotation.content_type.id)        \n        annotation.content_object = content_object.model_class().objects.get(id=annotation.object_id)        \n        print annotation.content_object     \n        annotation.save()\n        \n        print validated_data.get('shared_with')\n        for user in validated_data.get('shared_with'):\n        sharing = AnnotationShareMap(annotation=annotation, \n        user=user)\n        sharing.save()\n        \n        return annotation\n</pre>\n\n<p id=\"48\" style=\" \">All is well. We are doing here what we had done in the view in case of regular POST and Ajax requests. We fetch the instance, decode its generic foreign key and return the appropriate values, or save them.</p>\n\n<p id=\"49\" style=\" \">Add up tests to <code>POST</code>, <code>PUT</code> and <code>DELETE</code> annotations and we're done here</p>\n\n<pre class=\"brush: python\">def _create_annotation(self, content=None):\n    #use test client to POST a request\n    self._require_login()\n    print(self.user.is_authenticated()) # returns True\n    string_data = {\n                'content_type': content['content_type'],\n                'object_id':content['object_id'],\n                'paragraph':content['paragraph'],\n                'body': content['body'],\n                'author':content['author'],\n                'privacy':content['privacy'],\n                'privacy_override': content['privacy_override'],\n                'shared_with': content['shared_with'],\n                }\n    json_data = json.dumps(string_data)\n    return self.client.post(\n                '/annotations/annotations/',\n                content_type='application/json',\n                data = json_data,\n                )\n\ndef test_POST_annotation(self):\n    response = self._create_annotation(content={\n        'content_type': '9',\n        'object_id':'1',\n        'paragraph':'1',\n        'body':'Dreaming is good, day dreaming, not so good.',\n        'author':str(self.user.id),\n        'privacy':'3',\n        'privacy_override': '0',\n        'shared_with': ['1'],\n        })\n       \n    #Expect a JSON object in response\n    #Try to get all the annotations. Count should be 1, and it must be ours.\n    \n    #print \"Response\"\n    #print response.content.decode()       \n    \n    self.assertEqual(Annotation.objects.all().count(), 1)\n    annotation = Annotation.objects.all()[0]\n    \n    #print 'Annotation content_object'\n    #print annotation.content_object\n    self.assertEqual(annotation.body, 'Dreaming is good, day dreaming, not so good.')\n    self.assertEqual(annotation.paragraph, 1)\n    \n    map = AnnotationShareMap.objects.all()\n    for share in map:\n        print str(share)\n\ndef test_PUT_annotation(self):\n    self._create_annotation(content={\n            'content_type': '9',\n            'object_id':'1',\n            'paragraph':'1',\n            'body':'Dreaming is good, day dreaming, not so good.',\n            'author':str(self.user.id),\n            'privacy':'3',\n            'privacy_override': '0',\n            'shared_with': ['1'],\n            })\n    \n    #Update the annotation    \n    annotation = Annotation.objects.all()[0]\n    string_data = {\n            'content_type': '9',\n            'object_id':'1',\n            'paragraph':'1',\n            'body':'This is the updated annotation',\n            'author':str(self.user.id),\n            'privacy':'3',\n            'privacy_override': '0',\n            'shared_with': ['1'],\n            }\n    json_data = json.dumps(string_data)\n    url = '/annotations/annotations/'+ str(annotation.id)+'/'\n    response = self.client.put(\n                url,\n                content_type='application/json',\n                data = json_data,\n                )\n    \n    #print \"Response\"\n    #print response.content.decode()       \n    self.assertEqual(Annotation.objects.all().count(), 1)\n    annotation = Annotation.objects.all()[0]\n    \n    #print 'Annotation content_object'\n    #print annotation.content_object\n    self.assertEqual(annotation.body, 'This is the updated annotation')\n    self.assertEqual(annotation.paragraph, 1)\n\ndef test_DELETE_annotation(self):\n    self._create_annotation(content={\n            'content_type': '9',\n            'object_id':'1',\n            'paragraph':'1',\n            'body':'Dreaming is good, day dreaming, not so good.',\n            'author':str(self.user.id),\n            'privacy':'3',\n            'privacy_override': '0',\n            'shared_with': ['1'],\n            })\n    annotation = Annotation.objects.all()[0]\n    url = '/annotations/annotations/'+ str(annotation.id)+'/'\n    response = self.client.delete(url, content_type='application/json', data={})\n    \n    print \"Response\"\n    print response.content.decode()       \n    self.assertEqual(Annotation.objects.all().count(), 0)\n</pre>\n\n<p id=\"50\" style=\" \">Running the tests says all tests passed. I heaved a sigh of relief when these last tests passed. Do you know what it indicates? It indicates that we are done developing our backend code for this app for a while now. Now we can actually hook it up with the front end and put the complete app into perspective. That, we will do in the <a href=\"/C/course/computer-science/django/annotations-tutorial-wiring-up-back-and-frontend/23/\" target=\"_blank\">next and final tutorial</a> of this series.</p>", "pid_count": " 50"}


Converting Annotations Tutorial: Moving towards AJAX APIs
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this part of our per-paragraph commenting app, we will replace the regular <code>POST </code> requests to make annotations with AJAX powered requests.</p>\n\n<hr/>\n<p id=\"2\" style=\" \">In this tutorial, we will improve upon the POST request views that we made in the <a href=\"/C/course/computer-science/django/annotations-tutorial-making-our-first-annotation/20/\" target=\"_blank\">previous tutorial</a> and use Django's inbuilt serialization and deserialization techniques to post annotations and retrieve them.</p>\n\n<p class=\"text-center\" id=\"3\" style=\" \"><img alt=\"How Django and Ajax work together\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/12/annotations_10_1.png\" style=\" \"/><small><a href=\"https://realpython.com/blog/python/django-and-ajax-form-submissions-more-practice/\" target=\"_blank\">(Image Credits and Copyright)</a></small></p>\n\n<p id=\"4\" style=\" \">With Ajax, some things change, but it definitely makes the life more efficient for the users. They no longer have to deal with page reloads when they make annotations. Also, with the advent of internet apps, and app based models (and mobile apps as well), the loading of resource too is being actively delegated to apps, which come as closed boxes such that their styles do not affect other things on that page. So, the internet model is approaching a plug-and-play model, supplanting such self-contained apps in place of a backend served monolith. This is akin to what assembled computers are to their OEM counterparts. The user gets to choose what he/she wants.</p>\n\n<p id=\"5\" style=\" \">It also makes things a little easier for developers, as they no longer have to deal with redirects on submission of forms to prevent duplication. However, there are new issues too, and also some old wine in new bottles!</p>\n\n<p id=\"6\" style=\" \">While there are many problems that could arise, I have in mind one particular problem. That is of the CSRF token. So far, we haven't used any template (we haven't used any frontend either) but I'd like to stick to it. In case of Django forms, a simple <code>{% csrf_token %} </code> template tag inserted a CSRK Token in the form itself while it was being served up by the backend server. With the frontend now depending on Ajax (where we are not using a backend delivered form), where should we get and keep the CSRF token? Why should I have to put a CSRF token somewhere in the DOM as an element when I am not rendering the full form? I won't! So, we read this piece of <a href=\"https://docs.djangoproject.com/en/1.6/ref/contrib/csrf/#ajax\" target=\"_blank\">Django Documentation</a></p>\n\n<p id=\"7\" style=\" \">For now, we won't actually need it, for we are not actually making an Ajax call but passing serialized data in <code>JSON </code> format. We haven't hooked up the front-end with the backend yet, and it will stay so for a while. I believe that if interface-specifications are agreed upon and followed properly, integration mustn't be too much of a hassle.</p>\n\n<p id=\"8\" style=\" \">So, this is how we'd change our tests:</p>\n\n<pre class=\"brush: python\">def test_POST_annotation(self):\n    #use test client to POST a request\n    string_data = {\n        'content_type': '9',\n        'object_id':'1',\n        'paragraph':'1',\n        'body':'Dreaming is good, day dreaming, not so good.',\n        'author':str(self.user.id),\n        'privacy':'3',\n        'privacy_override': '0',\n        'shared_with': ['1'],\n        }\n    json_data = json.dumps(string_data)\n    response = self.client.post(\n        '/annotations/',\n        content_type='application/json',\n        data = json_data,\n        )\n</pre>\n\n<p id=\"9\" style=\" \">and</p>\n\n<pre class=\"brush: python\">def test_retrieve_annotations_for_post(self):\n    #use test client to visit the page\n    #create a few annotations first\n    string_data = {\n        'content_type': '9',\n        'object_id':'1',\n        'paragraph':'1',\n        'body':'Dreaming is good, day dreaming, not so good.',\n        'author':str(self.user.id),\n        'privacy':'3',\n        'privacy_override': '0',\n        'shared_with': ['1'],\n        }\n    json_data = json.dumps(string_data)\n    response = self.client.post(\n        '/annotations/',\n        content_type='application/json',\n        data = json_data,\n        )\n    response = self.client.get('/annotations/?content_type=blogcontent&amp;object_id=1')\n    #get must return annotations in an HttpResponse object.\n    print(str(json.loads(response.content)))\n    self.assertContains(response, 'Dreaming is good, day dreaming, not so good.')\n</pre>\n\n<p id=\"10\" style=\" \">We added a <code>content_type </code> attribute to our <code>POST </code> call, and serialized the Dictionary using JSONs <code>dumps() </code> method. <mark>Note one change </mark>, however: Now we are passing a list of ' <code>shared_with </code>' values, rather than just a string. This is because in JSON, it is being sent as a multiple selection. So, even if we don't have it shared with anybody, there must be an empty list.</p>\n\n<p id=\"11\" style=\" \">On receiving it in our view, we will change the code slightly, to handle the JSON.</p>\n\n<pre class=\"brush: python\">if request.method == 'POST':\n    #Handle the post request\n    json_data = json.loads(request.body)\n    annotation_form = AnnotationForm(json_data)\n    annotation_json = {\n        'body': annotation_form.cleaned_data['body'],\n        'paragraph':annotation_form.cleaned_data['paragraph'],                           \n        }\n    return HttpResponse(\n        json.dumps(annotation_json),\n        content_type='application/json'\n        )\n</pre>\n\n<p id=\"12\" style=\" \">Note that now, we no longer redirect to the page (for it is Ajax, and we are not supposed to reload.)</p>\n\n<p id=\"13\" style=\" \">For a <code>GET </code>, we use the built in serializer in Django (for it can handle Foreign Keys):</p>\n\n<pre class=\"brush: python\">annotation_json =serializers.serialize('json', annotation)\nreturn HttpResponse(\n    annotation_json,\n    content_type='application/json'\n    )\n</pre>\n\n<p id=\"14\" style=\" \">Running the tests, and everything passes. Good! The output returned looks like:</p>\n\n<pre class=\"brush: bash\">[{u'pk': 1, u'model': u'annotations.annotation', u'fields': {u'body': u'Dreaming is good, day dreaming, not so good.', u'privacy': 3, u'author': 1, u'object_id': u'1', u'date_created': u'2015-02-23T18:10:58.818Z', u'paragraph': 1, u'content_type': 9, u'privacy_override': True, u'date_modified': u'2015-02-23T18:10:58.818Z'}}]\n</pre>\n\n<p id=\"15\" style=\" \"><strong>What have we done until yet?</strong></p>\n\n<ol id=\"16\">\n\t<li>We can create annotations using JSON objects (Ajax ready)</li>\n\t<li>We can retrieve annotations in JSON format (again, Ajax ready)</li>\n</ol>\n\n<p id=\"17\" style=\" \"><strong>What we haven't done yet?</strong></p>\n\n<ol id=\"18\">\n\t<li>Hooking up the frontend form with the backend.</li>\n\t<li><a name=\"privacy\"></a>Creating a private annotation</li>\n\t<li>Fetching annotations made by a user (different user, so only public annotations must be fetched)</li>\n\t<li>Fetching annotations we have made and their reverse URL to the posts they were made on.</li>\n\t<li>Editing an annotation.</li>\n\t<li>Deleting an annotation</li>\n\t<li><a name=\"override\"></a> Overriding the privacy of annotation (provided we are allowed to do so)</li>\n\t<li><a name=\"notify\"></a>Sending a notification to other users (if annotation is shared)</li>\n</ol>\n\n<p id=\"19\" style=\" \">By the time I had reached here, I had heard that using Ajax frameworks makes our lives very easy. So, I would also like to cut to the chase and get down to using them first and implementing these features (alongwith what we've already developed) in those frameworks. For a learning experience though, if you should insist (and I will need an overwhelming amount of requests to do that, because I have not done it before) I could fill in this place with another tutorial of making those things without anything else but Django only. But that would only prove what we already know, frameworks make lives easier and code shorter. If they've done it already, why repeat it? (expect of course for the learning experience).</p>\n\n<p id=\"20\" style=\" \">Also note that in this tutorial series, we won't be working on points <a href=\"#privacy\">2</a>,<a href=\"#override\">7</a> and <a href=\"#notify\">8</a>. Also, we'd only be providing groundwork for 3 and 4, i.e. the functionality will be present, but not displayed or used from the frontend as it is. That is little more work and I'd like you to do that (as homework) for fun.</p>\n\n<p id=\"21\" style=\" \">So, in our <a href=\"/C/course/computer-science/django/annotations-tutorial-doing-it-with-django-rest-framework/22/\" target=\"_blank\">next tutorial</a>, we'll start using Django Rest Framework to power our annotations app rather than regular AJAX, and finally wire the backend with the frontend.</p>\n", "pid_count": " 21"}


Converting Annotations Tutorial: Making our first annotation
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this part of our per-paragraph commenting app, we will design our data models and write test cases and views for a regular <code>POST</code> request.</p>\n\n<hr/>\n<p class=\"text-center\" id=\"60\" style=\" \"><img alt=\"Creating models from concepts and requirements\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/11/annotations_10_1.jpg\" style=\" \"/><small><a href=\"http://www.rizawerx.com/how/TungstenM/modeling%20TungstenM.htm\" target=\"_blank\">(Image Credits)</a></small></p>\n\n<p id=\"2\" style=\" \">As we said in the <a href=\"/C/course/computer-science/django/annotations-tutorial-setting-up-django-backend/19/\" target=\"_blank\">last tutorial</a>, we saw how our frontend annotation parameters have been modeled. Now, let us put them in python perspective. A Django Data Model for the required annotation fields would look like:</p>\n\n<pre class=\"brush: python\">class Annotation(models.Model):\n    PRIVACY_OPTIONS = (\n    ( 'public', 0),\n    ( 'author', 1),\n    ( 'group', 2),\n    ('private', 3),\n    )\n    #Relations with other objects\n    content_type = models.ForeignKey(ContentType, \n    verbose_name=_(\"Content Type\"), \n    related_name=\"content_type_set_for_annotations\")\n    object_id = models.TextField(_(\"object ID\"))\n    content_object = generic.GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_id\")\n    #User relevant stuff\n    body = models.TextField()\n    paragraph = models.PositiveIntegerField(null=False)\n    '''\n    Annotations can be written only by logged in users. If the user cannot afford \n    to make himself and his interest in reading known, alas, we cannot help him in\n    case of making annotations. It is also to prevent hit and run comments by people\n    under anonymity.\n    '''\n    author = models.ForeignKey(User, related_name=\"author\", null=False, blank=False, verbose_name=_(\"Annotation author\"))\n    #Privacy settings\n    privacy= models.PositiveSmallIntegerField(choices=PRIVACY_OPTIONS, default=PRIVACY_OPTIONS['private'])\n    #Privacy reset for Spam protection, if annotation has been shared (and marked as offensive)\n    privacy_override = models.BooleanField(default=False)\n    #Shared with these users.\n    shared_with = models.ManyToManyField(User, through=\"Annotation_share_map\", null=\"True\")\n    #Statistics related stuff\n    date_created = models.DateTimeField(auto_now_add=True)\n    date_modified = models.DateTimeField(auto_now=True)   \n</pre>\n\n<p id=\"3\" style=\" \">Lets write a simple test to create an Annotation object. In our test class, create a new test as:</p>\n\n<pre class=\"brush: python\">def test_create_annotation(self):\n    annotation = Annotation()\n    annotation.content_type=\"blogging\"\n    annotation.object_id= str(1)\n    annotation.body=\"This is a test annotation\"\n    annotation.author= User.objects.get(pk=1)\n    annotation.save()\n</pre>\n\n<p id=\"4\" style=\" \">You'll also need to import the models</p>\n\n<pre class=\"brush: python\">    from annotations.models import Annotation \n    from django.contrib.auth.models import User\n</pre>\n\n<p id=\"5\" style=\" \">Running the tests gives:</p>\n\n<pre class=\"brush: python\">    privacy= models.PositiveSmallIntegerField(choices=PRIVACY_OPTIONS, default=PRIVACY_OPTIONS['private'])\n    TypeError: tuple indices must be integers, not str\n</pre>\n\n<p id=\"6\" style=\" \">Hmm, yeah, let's see what went wrong. The default value is supposed to have an integer value, which we thought we gave when we said PRIVACY_OPTIONS['private']. But, tuple indices must be integers, not str. So, either we make a dictionary out of it, but that would give an error (unhashable type), or we refine our <code>PRIVACY_OPTIONS</code> as</p>\n\n<pre class=\"brush: python\">    PRIVACY_PUBLIC = 0\n    PRIVACY_AUTHOR = 1\n    PRIVACY_GROUP = 2\n    PRIVACY_PRIVATE = 3\n    PRIVACY_OPTIONS = (\n    (PRIVACY_PUBLIC, 'public'),\n    (PRIVACY_AUTHOR, 'author'),\n    (PRIVACY_GROUP, 'group'),\n    (PRIVACY_PRIVATE, 'private'),\n    )\n</pre>\n\n<p id=\"7\" style=\" \">And our privacy is now set as:</p>\n\n<pre class=\"brush: python\">    privacy= models.PositiveSmallIntegerField(choices=PRIVACY_OPTIONS, default=PRIVACY_PRIVATE)\n</pre>\n\n<p id=\"8\" style=\" \">What is happening here? We are telling that privacy is a choices field which can take options specified by the tuple <code>PRIVACY_OPTIONS</code> which in itself contains a 'Value', 'Descriptive Text' pair as tuple. If nothing is provided, the value must be <code>PRIVACY_PRIVATE</code> which is set to an integer <var>3</var>.</p>\n\n<p id=\"9\" style=\" \">Now, it looks like:</p>\n\n<pre class=\"brush: python\">    class Annotation(models.Model):\n        PRIVACY_PUBLIC = 0\n        PRIVACY_AUTHOR = 1\n        PRIVACY_GROUP = 2\n        PRIVACY_PRIVATE = 3\n        PRIVACY_OPTIONS = (\n        (PRIVACY_PUBLIC, 'public'),\n        (PRIVACY_AUTHOR, 'author'),\n        (PRIVACY_GROUP, 'group'),\n        (PRIVACY_PRIVATE, 'private'),\n        )\n        #Relations with other objects\n        content_type = models.ForeignKey(ContentType, \n        verbose_name=_(\"Content Type\"), \n        related_name=\"content_type_set_for_annotations\")\n        object_id = models.TextField(_(\"object ID\"))\n        content_object = generic.GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_id\")\n        #User relevant stuff\n        body = models.TextField()\n        '''\n        Annotations can be written only by logged in users. If the user cannot afford to make himself and his interest in reading known, alas, we cannot help him in case of making annotations. It is also to prevent hit and run comments by people under anonymity.\n        '''\n        author = models.ForeignKey(User, related_name=\"author\", null=False, blank=False, verbose_name=_(\"Annotation author\"))\n        #Privacy settings\n        privacy= models.PositiveSmallIntegerField(choices=PRIVACY_OPTIONS, default=PRIVACY_PRIVATE)\n        #Privacy reset for Spam protection, if annotation has been shared (and marked as offensive)\n        privacy_override = models.BooleanField(default=False)\n        #Shared with these users.\n        shared_with = models.ManyToManyField(User, through=\"Annotation_share_map\", null=\"True\")\n        #Statistics related stuff\n        date_created = models.DateTimeField(auto_now_add=True)\n        date_modified = models.DateTimeField(auto_now=True)  \n</pre>\n\n<p id=\"10\" style=\" \">Rerunning the test gives this error now:</p>\n\n<pre class=\"brush: python\">    CommandError: One or more models did not validate:\n    annotations.annotation: 'shared_with' specifies an m2m relation through model Annotation_share_map, which has not been installed\n</pre>\n\n<p id=\"11\" style=\" \">Some progress, see? We know this one, we did not create a share map. But before we did that, do we know what it is, and why do we need it?</p>\n\n<p id=\"12\" style=\" \">This field is relevant when the user wants to share the annotation with a select few people who are also members of the portal (that is, have a user ID). It can just be the author of the post, if the privacy is set to <code>PRIVACY_AUTHOR</code>, or could be many people. Under ordinary conditions, if we did not give a '<code>through</code>' parameter in our <code>shared_with</code> attribute, Django would have created a mapping table implicitly, with two columns: First would be the Primary Key of this instance (Annotations Table), and other would be the Primary Key of the Users with whom the annotation must be shared.</p>\n\n<p id=\"13\" style=\" \">Well, that is all good, then why do we need to specify our own? Simple, for storing additional statistics! For example, we may want to notify the other member that an annotation has been shared with him (example, notify the author that an annotation has been made on his article). If the user modifies the annotation, we must not send a notification again (that would be a nuisance). So, while signals would do it each time, we don't want such kind of behaviour, and hence, would make it conditional based on a field inside this table.</p>\n\n<p id=\"14\" style=\" \">So, let's make one:</p>\n\n<pre class=\"brush: python\">class Annotation_share_map(models.Model):\n    user = models.ForeignKey(User)\n    annotation = models.ForeignKey(Annotation)\n    notified_flag = models.BooleanField(default = False)\n    \n    class Meta:\n        app_label = 'annotations' \n</pre>\n\n<p id=\"15\" style=\" \">Rerunning the tests:</p>\n\n<p id=\"16\" style=\" \">It says that the User constraint is missing. Aah yes! the test runner does not use our database, and also did not ask us for a user name. So, we need to create one:</p>\n\n<pre class=\"brush: python\">    user = User(username=\"craft\")\n    user.save()\n</pre>\n\n<p id=\"17\" style=\" \">and</p>\n\n<pre class=\"brush: python\">    annotation.author= User.objects.get(id=1)\n</pre>\n\n<p id=\"18\" style=\" \"><mark>Please note that this method of creation of user from a model is pretty stupid (though it served my purpose here). Use <code>User.objects.create_user</code> instead. Do explore Django unit testing framework, it has neat features which I was still learning when I was writing these tutorials.</mark></p>\n\n<p id=\"19\" style=\" \">Now, running the test passes the test. This simply tests our model. But what we would like to test is our code flow. The code flow goes something like:</p>\n\n<ol>\n\t<li id=\"20\">User writes an annotation.</li>\n\t<li id=\"21\">User presses 'Post' and the <code>POST</code> request is sent to the backend to the URL '<code>/annotations/new</code>'</li>\n\t<li id=\"22\">In the backend, the URL resolver routes the request to the Annotation App to its view.</li>\n\t<li id=\"23\">In the view, we first validate the parameters of the incoming request for their sanity.</li>\n\t<li id=\"24\">If the inputs are sane, we write them to the database and return a <code>200</code> Return code (OK), returning the newly created Annotation content.</li>\n\t<li id=\"25\">The user sees the Annotation that he created in the form as a new annotation.</li>\n</ol>\n\n<p id=\"26\" style=\" \">Did we read form? Django can create forms from the models itself. They're <code>modelforms</code>. Additionally, Django forms come with features to check the sanity of the data passed. So, here is what we'll do:</p>\n\n<ol id=\"27\">\n\t<li>Use <code>modelforms</code> to create a form of our model.</li>\n\t<li>Feed our incoming data into the form class and validate it.</li>\n\t<li>If the validation is successful, we'll save it.</li>\n</ol>\n\n<p id=\"28\" style=\" \">But for that, we'll need a form. So, lets do that.</p>\n\n<p id=\"29\" style=\" \">It makes sense that we have some pre-created data, from fixtures. Blogging App provides us with some initial data. For my case, I have a username and password 'craft'. You mustn't do that (setting the same username and passwords in production. I did it because I forget passwords.)</p>\n\n<p id=\"30\" style=\" \">So, here's our model form:</p>\n\n<pre class=\"brush: python\">from annotations.models import Annotation\nclass AnnotationForm(forms.ModelForm):\n    class Meta:\n        model = Annotation\n        fields = ['id', 'content_type', 'object_id', 'body', 'author', 'privacy',\n        'paragraph','privacy_override', 'shared_with']\n</pre>\n\n<p id=\"31\" style=\" \">That done, let us see if we can actually post something. But before, let us plan what we are going to do.</p>\n\n<p id=\"32\" style=\" \">Create a POST request and send it to our server. The server must route it to the annotations app, where we will check if the request type is <code>POST</code>. If it is, we pass the <code>POST</code> data into the Form Class and check if it validates. If it does, we save it. If it doesn't, we will do something about it. In any case, we expect that the content-type and object ID of parent post will be correct. We will get an instance of the parent object (without having to know what class it is) and call its <code>get_absolute_url()</code> method to know where we want to go back to as redirect. You see, we're as of yet not AJAXing our request. That's up next!</p>\n\n<p id=\"33\" style=\" \">In any case, we'd be redirecting back to that page only, for now. So, in our test, we'll verify that we actually redirect to the right page. Here's the test:</p>\n\n<pre class=\"brush: python\">def test_POST_annotation(self):\n    #the result must redirect to the same page but not reload the same page (for now)\n    response = self.client.post(\n        '/annotations/',\n        data = {\n            'content_type': '9',\n            'object_id':'1',\n            'paragraph':'1',\n            'body':'Dreaming is good, day dreaming, not so good.',\n            'author':str(self.user.id),\n            'privacy':'3',\n            'privacy_override': '0',\n            'shared_with':'',\n            },\n        )\n    self.assertRedirects(response, '/blogging/articles/i-have-a-dream-by-martin-luther-king/1/')\n</pre>\n\n<p id=\"34\" style=\" \">And here's the view:</p>\n\n<pre class=\"brush: python\">def home(request):\n    if request.method == 'POST':\n        #Handle the post request\n        annotation_form = AnnotationForm(request.POST)\n        #validate form\n        if annotation_form.is_valid() is False:\n            #Parse and debug error\n            print 'Did not validate'\n            print annotation_form.errors            \n        else:            \n            #save the annotation\n            annotation_form.save()\n        #Find the reverse URL of the object where this annotation was posted\n        #Get an instance of the object on which the annotation was posted.\n        content_type = annotation_form.cleaned_data['content_type'];\n        object_id = annotation_form.cleaned_data['object_id'];\n        #Get row from contentType which has content_type\n        content_object = ContentType.objects.get_for_id(content_type.id)\n        #Get row from parent table whose parameters are stored in the object we fetched\n        #object_instance = content_object.get_object_for_this_type(pk=object_id)\n        object_instance = content_object.model_class().objects.get(id=object_id) \n        #get a reverse URL now\n        reverse_url = object_instance.get_absolute_url()      \n        return(HttpResponseRedirect(reverse_url))\n    elif request.method == 'GET':\n        #Handle the GET request\n        pass\n</pre>\n\n<p id=\"35\" style=\" \">Simple? (It is pretty commented even for a python routine and I like it this way so that I don't have to re-read everything from the tip of the iceberg till its bottom to make sense of the lines. I have a scarce memory resource.)</p>\n\n<p id=\"36\" style=\" \">Well, our form validation fails for the many to many field. It says \"&amp;quot;&amp;quot; is not a valid value for a primary key.\" Though we wanted it as optional value, and having set the <code>null=True</code> and <code>blank=True</code>, we are not able to skip it. If we don't pass anything, Python raises \"Cannot set values on a ManyToManyField which specifies an intermediary model. Use annotations.Annotation_share_map's Manager instead.\" That says that we are using a custom manager for our many to many tables share map.</p>\n\n<p id=\"37\" style=\" \">Now, you can refer to <a href=\"http://stackoverflow.com/questions/387686/what-are-the-steps-to-make-a-modelform-work-with-a-manytomany-relationship-with\" target=\"_blank\">this</a> link or to Django modelForms <a href=\"https://docs.djangoproject.com/en/1.6/topics/db/models/#many-to-many-relationships\" target=\"_blank\">documentation</a> for a little primer </p>\n\n<p id=\"38\" style=\" \">But, this helps:</p>\n\n<pre class=\"brush: python\">    else:            \n        #save the annotation\n        #Can't save a M2M field when using a custom table using 'through'\n        mapping = annotation_form.save(commit=False)\n        mapping.save()\n        for user in annotation_form.cleaned_data.get('shared_with'):\n        sharing = Annotation_share_map(annotation=mapping, user=user)\n        sharing.save()\n</pre>\n\n<p id=\"39\" style=\" \">Also, now we can test if it was actually saved. For now, let us just extend the current test only (though it is good practice to test only one thing in one test). We'll separate out the tests later.</p>\n\n<pre class=\"brush: python\">    self.assertEqual(Annotation.objects.all().count(), 1)\n    annotation = Annotation.objects.all()[0]\n    self.assertEqual(annotation.body, 'Dreaming is good, day dreaming, not so good.')\n    self.assertEqual(annotation.paragraph, 1)\n</pre>\n\n<p id=\"40\" style=\" \">Running the tests, all pass. Good going so far.</p>\n\n<p id=\"41\" style=\" \">So far, we've just tested creation of annotations. Let us now try to fetch created annotations. But wait! we haven't catered to that function yet. We'll do that now. But let us first try to see what we're going to do (and people advice that you try to 'see' in a test). I've found that it takes a little time to get the hang of writing a test first. So, I'll stick to first writing it down on a page, then (if possible depending on my dexterity of writing one) write a test, and then code. If not, I'll be writing the test immediately after I've written the first few lines of code which can be tested. The idea is to take small, traceable steps at a time. The skill cannot be gained by just reading a book.</p>\n\n<p id=\"42\" style=\" \">Here, since we've already written the code for posting an annotation, our test would look something like - creating annotations, and then, making a '<code>GET</code>' request. The content of the annotations we just created must be present in the response. And we've already discussed the '<code>GET</code>' scheme, the parameters we are going to pass in the request.</p>\n\n<p id=\"43\" style=\" \">So, our test can look like:</p>\n\n<pre class=\"brush: python\">def test_retrieve_annotations_for_post(self):\n    #use test client to visit the page\n    #create a few annotations first\n    self.client.post(\n        '/annotations/',\n        data = {\n            'content_type': '9',\n            'object_id':'1',\n            'paragraph':'1',\n            'body':'Dreaming is good, day dreaming, not so good.',\n            'author':str(self.user.id),\n            'privacy':'3',\n            'privacy_override': '0',\n            'shared_with':'1',\n            },\n        )\n    response = self.client.get('/annotations/?content_type=blogcontent&amp;object_id=1')\n    #get must return annotations in an HttpResponse object.\n    self.assertContains(response, 'Dreaming is good, day dreaming, not so good.')\n</pre>\n\n<p id=\"44\" style=\" \">Now, we add the functionality in our view too:</p>\n\n<pre class=\"brush: python\">    elif request.method == 'GET':\n        #Handle the GET request\n        content_type = ContentType.objects.get(model=request.GET.get('content_type', None))\n        object_id = request.GET.get('object_id', None)\n        annotation = Annotation.objects.filter(content_type=content_type.id, object_id=object_id)[0]\n        return HttpResponse(annotation.body)\n</pre>\n\n<p id=\"45\" style=\" \">That is a little hacky. Firstly, I'm filtering on the <code>ContentTypes</code> table with just the model field, though under unknown circumstances, I would have to use a pair of model and app name, because more than one app may use the same model name. Here' I can say we are just lucky (Because we made it that way). Second, since it is in our wishlist that we don't want to do a conventional <code>POST</code>, but through Ajax, I have not made a template or a proper HTML rendered response, but just sent the body of the annotation I just made in an <code>HttpResponse</code>, so that my test passes. Had it been more than one annotation, this code would break. But not to worry, we'll fix that in the <a href=\"/C/course/computer-science/django/annotations-tutorial-moving-towards-ajax-apis/21/\" target=\"_blank\">next tutorial</a>, while using Ajax calls and response.</p>\n", "pid_count": " 45"}


Converting Annotations Tutorial: Setting up Django Backend
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">So, with front-end pretty much designed right, we now move to backend design for our per-paragraph commenting app and we will work with Django</p>\n\n<hr/>\n<p id=\"2\" style=\" \">So it finally begins. Here, we now dive into the backend, having our front end fairly finished. What I would like to do though, since I've been reading and learning about this TDD (Test Driven Development) approach, is that we do one step at a time, and also follow the test driven approach to make this app. Okay?</p>\n\n<p id=\"3\" style=\" \">So, in this post, we would do some groundwork by setting up the backend app prerequisites and indulge in some design blabber.</p>\n\n<p id=\"4\" style=\" \">Just as a reminder, we had seen what all data we'll like to pull from the backend for each annotation. It looked like:</p>\n\n<pre class=\"brush: js\">{\n  content_id: \"1\",\n  paragraph_id: \"1\",\n  annotation_body: \"Lorem Ipsum\",\n  user : {\n    user_id: \"1\",\n    user_name: \"John Doe\",\n    user_gravatar: \"images/male.png\",\n    user_url: \"#\",\n    },\n}\n</pre>\n\n<p id=\"5\" style=\" \">We could straightaway use this as a basis of our app. But first, the preliminaries - In its inception, I designed this app to be fairly modular and independent. I even experimented with '<em>on the fly</em>' magic, where one doesn't have to tell the other app about this app at all, and it would still work. But it didn't quite happen.</p>\n\n<p id=\"6\" style=\" \">There are a few reasons, or rather limitations which I don't know how to circumvent for now. Salient ones are:</p>\n\n<ol>\n\t<li id=\"7\">\n\t<p style=\" \">Suppose we were to make a completely decoupled app, that would mean we wouldn't need to make any template changes to the parent app too. Then we'll be hooking on to content rendered by the other app. But how do we know which part in the page is the one we must work on. We needed that 'commentable-container' right? So, some kind of template intrusion is there already.</p>\n\t</li>\n\t<li id=\"8\">\n\t<p style=\" \">We also need those unique IDs on the content blocks, they're not going to produce themselves? In fact, we developed such functionality in our '<em><a href=\"https://github.com/PirateLearner/blogging\" target=\"_blank\">blogging</a></em>' app just to cater to this feature, and it works quite well. You can try creating an annotation on this page itself to see how it works.</p>\n\t</li>\n\t<li id=\"9\">We could go with Django's AJAX capabilities, but that would be too much work. Wasn't Django all about DRY? and in fact, so is Pirate Learner! So, I evaluated <em><a href=\"http://tastypieapi.org/\" target=\"_blank\">TastyPie</a></em> and <em><a href=\"http://www.django-rest-framework.org/\" target=\"_blank\">Django Rest Framework</a></em>, and though Tastypie seemed a little more tastier, reviews and developer feedback said Django Rest Framework is more... bendable, so to speak. But for Django REST framework, we needed to put a generic relation in the target app too. The good news is, it doesn't go into the DB. The bad news is, it still goes into their model, to ease up the reverse mappings and URL generation.</li>\n</ol>\n\n<p id=\"10\" style=\" \">So, if you can see why I was not able to make a completely independent module, I can purport that it is a loosely coupled app. Whenever you are ready, we can dive into developing it backend.</p>\n\n<blockquote>Test first, Code later.</blockquote>\n\n<p id=\"11\" style=\" \">'Test first, Code later' - That's what TDD philosophy is. Make a test (which will fail), then write the minimal amount of code which will cause the test to pass, next test, repeat. Let's see how well can I do it.</p>\n\n<p id=\"12\" style=\" \">In this tutorial, we'll set up an environment and get our packages.</p>\n\n<p id=\"13\" style=\" \"><strong>Preparing the Environment:</strong></p>\n\n<p id=\"14\" style=\" \">Inside a folder, lets say, ' <code>project </code>' create a virtual environment using virtualenv</p>\n\n<pre class=\"brush: bash\">  virtualenv env --no-site-packages\n</pre>\n\n<p id=\"15\" style=\" \">We'd like to add that <code>--no-site-packages </code> so that our virtual environment does not load any globally installed libraries. Why? Because that will ensure that I am tracking my dependent modules in my <code>requirements.txt </code> file well.</p>\n\n<p id=\"16\" style=\" \">In case you don't have it installed, you can install it using</p>\n\n<pre class=\"brush: bash\">  sudo pip install virtualenv\n</pre>\n\n<p id=\"17\" style=\" \">To install ' <code>pip </code>', get the latest <a href=\"https://bootstrap.pypa.io/get-pip.py\"> <code>get_pip.py </code></a> script. Note that I am working on a Linux machine, and you might need to google a lot if your's is not a *nix family OS.</p>\n\n<pre class=\"brush: bash\">  Django==1.6.8\n  pi-blogging &gt;=0.1.0b1\n  #blogging requirements\n  django-classy-tags==0.4\n  html5lib==1.0b1\n  django-mptt==0.6\n  django-sekizai==0.7\n  six==1.3.0\n  django-ckeditor==4.4.4\n  south==1.0.2\n  # Optional, recommended packages\n  Pillow\n  django-filer==0.9.5\n  django-reversion==1.8.5\n  django_select2\n  easy_thumbnails\n  django-taggit\n  django-crispy-forms\n  beautifulsoup4\n  lxml\n  #annotation requirements\n  djangorestframework\n  selenium\n</pre>\n\n<p id=\"18\" style=\" \">You can install them all by putting them in a <code>requirements.txt </code> and using ' <code>pip install -r requirements.txt </code>'</p>\n\n<p id=\"19\" style=\" \"><mark><em>NOTE: installing pillow seems to cause installation problems on many systems. For that, try the following:</em> </mark></p>\n\n<pre class=\"brush: bash\">  sudo ln -s /usr/include/freetype2 /usr/local/include/freetype\n  sudo apt-get build-dep python-imaging\n</pre>\n\n<p id=\"20\" style=\" \">as suggested on <a href=\"http://unix.stackexchange.com/questions/105265/install-pil-pillow-via-pip-in-debian-testing-jessie\" target=\"_blank\">this link</a>seems to fix it on one of my systems.</p>\n\n<p id=\"21\" style=\" \">Further, you'll also need development versions of <code>libxml2 </code> and <code>libxslt </code>:</p>\n\n<pre class=\"brush: bash\">  sudo apt-get install libxml2-dev libxslt1.1 libxslt1-dev libxml2\n</pre>\n\n<p id=\"22\" style=\" \">Thereafter, we configure our Django in our virtual environment:</p>\n\n<pre class=\"brush: python\">  django-admin.py startproject demo\n</pre>\n\n<p id=\"23\" style=\" \">This should create a project directory structure resembling this:</p>\n\n<pre class=\"brush: bash\">demo/\n|-- demo\n|   |-- __init__.py\n|   |-- settings.py\n|   |-- urls.py\n|   `-- wsgi.py\n`-- manage.py\n</pre>\n\n<p id=\"24\" style=\" \">In the <code>settings.py </code>, setup the <a href=\"https://github.com/PirateLearner/blogging\" target=\"_blank\">blogging app</a> and its prerequisites, and finally our annotations app:</p>\n\n<pre class=\"brush: python\">  INSTALLED_APPS = (\n  ...\n  'blogging',\n  'mptt',\n  'sekizai',\n  'reversion',\n  'django_select2',\n  'easy_thumbnails',\n  'filer',\n  'taggit',\n  'crispy_forms',\n  'ckeditor',\n  'annotations',\n  ...\n  )\n</pre>\n\n<pre class=\"brush: python\">  TEMPLATE_CONTEXT_PROCESSORS = (\n  'django.contrib.auth.context_processors.auth',\n  'django.contrib.messages.context_processors.messages',\n  'django.core.context_processors.i18n',\n  'django.core.context_processors.debug',\n  'django.core.context_processors.request',\n  'django.core.context_processors.media',\n  'django.core.context_processors.csrf',\n  'django.core.context_processors.tz',\n  'sekizai.context_processors.sekizai',\n  'django.core.context_processors.static',\n  )\n</pre>\n\n<pre class=\"brush: python\">  TEMPLATE_DIRS = (\n  os.path.join(PROJECT_PATH, \"templates\"),\n  )\n  STATIC_URL = '/static/'\n  MEDIA_ROOT = PROJECT_PATH+'/media'\n  MEDIA_URL = '/media/'\n  STATICFILES_DIRS = (\n  PROJECT_PATH+\"/static\",\n  )\n</pre>\n\n<p id=\"25\" style=\" \">With this done, we can start writing our first test, fail and and then move ahead. Since we are sitting on top of a page, we assume that most of the rendering of content is in place. We will not be testing other apps in this tutorial, but just our annotation app.</p>\n\n<p id=\"26\" style=\" \">So, lets see if we can get our app to resolve in our first test case.</p>\n\n<p id=\"27\" style=\" \">In <code>tests.py </code>:</p>\n\n<pre class=\"brush: python\">  from django.test import TestCase\n  from django.core.urlresolvers import resolve\n  #from django.http import request\n  # Create your tests here.\n  class basic_setup(TestCase):\n      def test_can_resolve_app_url(self):\n          obj = resolve('/annotations/')\n</pre>\n\n<p id=\"28\" style=\" \">And run:</p>\n\n<pre class=\"brush: bash\">  python manage.py tests\n</pre>\n\n<pre class=\"brush: bash\">Resolver404: {u'path': 'annotations/', u'tried': [[\n&lt;regexurlpattern home=\"\"&gt;], [\n&lt;regexurlresolver&gt; (admin:admin) ^admin/&gt;]]}\n----------------------------------------------------------------------\nRan 1 test in 0.027s\nFAILED (errors=1)\n&lt;/regexurlresolver&gt;\n&lt;/regexurlpattern&gt;\n</pre>\n\n<p id=\"29\" style=\" \">Oh, we haven't added the url pattern. Add it in <code>demo/urls.py </code>:</p>\n\n<pre class=\"brush: python\">  url(r'^annotations/', include('annotations.urls', namespace='annotations')),        \n</pre>\n\n<p id=\"30\" style=\" \">Note that we must have the blogging app set up properly, which means a url for that in the <code>urls.py </code>. So if you haven't, add it now:</p>\n\n<pre class=\"brush: python\">  url(r'^blogging/', include('blogging.urls',namespace='blogging')),\n</pre>\n\n<p id=\"31\" style=\" \">Run the tests again:</p>\n\n<pre class=\"brush: bash\">ImportError: No module named urls\n----------------------------------------------------------------------\nRan 1 test in 0.025s\nFAILED (errors=1)\n</pre>\n\n<p id=\"32\" style=\" \">Oh, yes, we haven't made a URL router for our app yet. Do we need it? Usually we will need a <code>urls.py </code> file in our app if there are more URL patterns that we want to deduce, that is, there is more hierarchy in our app. In our current case, what do we expect?</p>\n\n<p id=\"33\" style=\" \">There will be either <code>GET </code> or a <code>POST </code> request. using the <code>GET </code> request, we can get all the annotations for some content, and with <code>POST </code>, we can add new annotations for the particular post. This means that we don't really need it.</p>\n\n<p id=\"34\" style=\" \">Thus, we can change our code by directly calling the view of our app.</p>\n\n<pre class=\"brush: python\">  url(r'^annotations/', 'annotations.views.home'),\n</pre>\n\n<p id=\"35\" style=\" \">Okay, run the tests again:</p>\n\n<pre class=\"brush: python\">ViewDoesNotExist: Could not import annotations.views.home. View does not exist in module annotations.views.\n----------------------------------------------------------------------\nRan 1 test in 0.027s\nFAILED (errors=1)\n</pre>\n\n<p id=\"36\" style=\" \">New error, telling us that we haven't yet created a view. Let us begin with a dummy:</p>\n\n<p id=\"37\" style=\" \">In <code>views.py </code> of annotations:</p>\n\n<pre class=\"brush: python\">  def home():\n      pass\n</pre>\n\n<p id=\"38\" style=\" \">Running the tests passes the result.</p>\n\n<p id=\"39\" style=\" \">Next test, the function returned and what we expect must be the same:</p>\n\n<pre class=\"brush: python\">  self.assertEqual(obj.func, home)\n</pre>\n\n<p id=\"40\" style=\" \">This too shall pass, meaning that we are indeed returning the desired function. Let us think of the next step now. What would the user find if he simply visited the <code>/annotations/ </code> page? Above all, should he visit the annotations page at all, or should it be like magic?</p>\n\n<p id=\"41\" style=\" \">So, here is what the app must do:</p>\n\n<ol>\n\t<li id=\"42\">It must <strong>allow creation of new annotations</strong> on posts. This needs only <code>POST </code> content where we'll have content object type, its ID and body.</li>\n\t<li id=\"43\">It must <strong>allow retrieving annotations</strong> for posts. This could be a <code>GET </code> method, or we could have a URL binding, of type <code>/annotations/content_type/object_id/ </code></li>\n\t<li id=\"44\">It must <strong>allow retrieving annotations made by the current user</strong>, and their parent post URLs. This could be a <code>GET </code> method, or another URL binding like <code>/annotations/users/&lt;user&gt;/ </code></li>\n\t<li id=\"45\">It must <strong>allow retrieving annotations made by another user which are marked as public</strong>. Same as above</li>\n\t<li id=\"46\">It must <strong>allow modifications of annotations by the author</strong>. <code>/annotations/&lt;id&gt;/ </code></li>\n\t<li id=\"47\">It must <strong>allow deletion of annotations by the author</strong>.</li>\n\t<li id=\"48\">It must <strong>allow moderation of annotations by administrators</strong> or moderators.</li>\n</ol>\n\n<p id=\"49\" style=\" \">Looking at this list above, no-where do we find any reason that the base page url must yield anything without a <code>GET </code> request, or a <code>POST </code> request. Also, since this would work behind the scenes, we don't expect users to be directly using these URLs, but via Ajax calls only. It seems a better thing to me to have a single URL where we can filter out the request by <code>GET </code> parameters or <code>POST </code> parameters. Except for the updation of annotations, where it would be better if we know what annotations are we updating. So, for that one case, a URL scheme is justified.</p>\n\n<pre class=\"brush: python\">  urlpatterns = patterns('',\n  url(r'^$', views.home, name='home'),\n  url(r'^/(?P&lt;id&gt;\\d+)/', views.update, name='update'))\n</pre>\n\n<p id=\"50\" style=\" \">For now, we'll build up from 'no-ajax' to 'Ajax' to 'Ajax-via REST', and develop accordingly.</p>\n\n<p id=\"51\" style=\" \">So, let us first create a few blogging articles, I'll do this with their fixtures (which comes bundled with the package).</p>\n\n<p id=\"52\" style=\" \">First, create database tables:</p>\n\n<pre class=\"brush: bash\">  python manage.py syncdb\n</pre>\n\n<p id=\"53\" style=\" \">then,</p>\n\n<pre class=\"brush: bash\">  python manage.py loaddata fixtures.json\n</pre>\n\n<p id=\"54\" style=\" \">We'll do a manual test to see if they have been created by starting the server. [We could have used selenium for that, but it is a small test. We'll not bring the big guns for now]. Hmm, everything seems to load, but I can't see any images. I had encountered this problem fairly recently, so I know what is wrong. The development server is not serving up static files. Why? Because we haven't told it to. How do we tell it to? By adding a rule in the <code>urls.py </code>.</p>\n\n<pre class=\"brush: python\">  from django.conf.urls.static import static\n  from django.conf import settings\n</pre>\n\n<p id=\"55\" style=\" \">The `settings` include is needed to find our <code>MEDIA_ROOT </code> which we had defined in our settings file (or else Django cannot find it here)</p>\n\n<pre class=\"brush: python\">  urlpatterns = urlpatterns+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</pre>\n\n<p id=\"56\" style=\" \">Restarting the server (it autorestarts, by the way), and lo! the images now load as desired. Let us also have a look at the markup of an article (does it contain unique IDs?). It does! Great! Also, we have already done the formating of the front end. So, why not hook it up here directly?</p>\n\n<p id=\"57\" style=\" \">We need to load our script. Let us just load it on every page for now (since it is easy to hack into the demo site's base html rather than every other app's templates.) Our previous tutorial's scripts and CSS will be used. It seems good practice to me to bundle the static files along with the app. So, let us make the static folder in our annotation app and put the JS and CSS files in there.</p>\n\n<p id=\"58\" style=\" \">So, now, annotations app folder structure looks like this:</p>\n\n<pre class=\"brush: bash\">annotations/\n|-- admin.py\n|-- forms.py\n|-- __init__.py\n|-- models.py\n|-- static\n|   |-- css\n|   |   |-- styles.css\n|   |   `-- styles.scss\n|   `-- js\n|       `-- script.js\n|-- tests.py\n`-- views.py\n</pre>\n\n<p id=\"59\" style=\" \">Start the server, see if it looks good? It does, mostly. Good enough to go ahead for now, in my case (Screenshot below). Now, back to design. But in the <a href=\"/C/course/computer-science/django/annotations-tutorial-making-our-first-annotation/20/\" target=\"_blank\">next tutorial</a>!</p>\n\n<p class=\"text-center\" id=\"60\" style=\" \"><img alt=\"Blogging app Page Sample Screenshot\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/11/annotations_9_1.png\" style=\" \"/></p>", "pid_count": " 60"}


Converting Annotations Tutorial: Collecting orphaned per-paragraph comments in buckets
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this part of our per-paragraph commenting annotations app, we create tabs at the bottom of the article to collect all annotations created on the post as a way to deal with orphaned annotations.</p>\n\n<hr/>\n<p id=\"2\" style=\" \">So far, we started with a very simple stacked layout and following a mobile-first design approach, loaded annotations via jQuery with fixtures for Ajax calls and associated them with their respective containers. Moreover, we neatly tucked the annotations created by other users in a bucket toggled by a button. Now, we would like to go through the last iteration of our front-end design before we can move into the backend design.</p>\n\n<p id=\"3\" style=\" \">So we would like to:</p>\n\n<ol id=\"4\">\n\t<li>Make a tabbed bucket at the bottom to collect annotations</li>\n\t<li>Dealing with orphaned notes.</li>\n</ol>\n\n<p class=\"text-center\" id=\"5\" style=\" \"><img alt=\"Creating tabs in pure CSS without Javascript\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/11/annotations_8_1.jpg\" style=\" \"/><small><a href=\"http://matthewjamestaylor.com/img/illustrations/large/beautiful-css-centered-menus-no-hacks-full-cross-browser-support.jpg\" rel=\"nofollow\" target=\"_blank\">(Image Credits)</a></small></p>\n\n<p id=\"6\" style=\" \">It might so happen that the author of the post revises the content and the paragraph that you made an annotation on no longer exists. Owing to the design of our blogging engine, the paragraph IDs will never be reused. Thus, if complete paragraphs are gone, the annotations for the non-existent paragraph will be orphaned. Since the author did not create the annotations, he must not be able to delete them, but leave it to the sweet will of the one who made the annotation. Thus, we would want to decouple the fate of the paragraphs and annotations. There remains an issue of '<em>what if the paragraph content was drastically modified?</em>', well, that is an issue right now, but I think that can be taken care of by revisioning. However, given the scope of our site, the paragraphs are not expected to alter significantly (unless something conceptually wrong was written, and your annotation pointed that out). So, we will, for now deal only with the first problem of orphaned annotations.</p>\n\n<p id=\"7\" style=\" \">First, create a bucket at the bottom of the article (building upon the markup and code from the previous iteration).</p>\n\n<pre class=\"brush: html\">&lt;div class=\"article-adjunct\"&gt;\n&lt;nav class=\"article-adjunct-nav\"&gt;\n&lt;ul class=\"article-adjunct-nav--list\"&gt;\n&lt;li class=\"nav-tab article-adjunct-nav--item active\"&gt;&lt;a href=\"#article-adjunct-tab-notes\"&gt;Notes&lt;/a&gt;&lt;/li&gt;\n&lt;li class=\"nav-tab article-adjunct-nav--item\"&gt;&lt;a href=\"#article-adjunct-tab-discuss\"&gt;Discussions&lt;/a&gt;&lt;/li&gt;\n&lt;li class=\"nav-tab article-adjunct-nav--item\"&gt;&lt;a href=\"#article-adjunct-tab-questions\"&gt;Questions&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/nav&gt;\n&lt;div class=\"article-adjunct-block\"&gt;\n&lt;div class=\"article-adjunct-tab active\" id=\"article-adjunct-tab-notes\"&gt;\nSome placeholder text\n&lt;/div&gt;\n&lt;div class=\"article-adjunct-tab\" id=\"article-adjunct-tab-discuss\"&gt;\nThe concept of group messaging shall allow more people to join in the conversation should the two (original people in conversation) oblige unanimously.\nUnanimous vote is required because even one person who does not oblige will be offended, and if that is so, we have a problem.\n&lt;/div&gt;\n&lt;div class=\"article-adjunct-tab\" id=\"article-adjunct-tab-questions\"&gt;\nThus, annotations that are aimed at starting conversations must result into conversations, but not on the post, but in the privacy of message boxes.\nSay, a person made a public annotation on an article, and somebody wanted to respond to it. He can respond to it via a message.\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n<p id=\"8\" style=\" \">We're making three tabs, one of which would contain our annotations. The others can be used for other purposes, for example, one of them may contain comments, while the other may contain references or other related stuff. We've marked up the list items in the navigation to their different tab contents using their IDs.</p>\n\n<p id=\"9\" style=\" \">Next, we want that only one of them (the one we clicked on) is active at a time. For this, we'll use this simple Javascript script (<a href=\"http://inspirationalpixels.com/tutorials/creating-tabs-with-html-css-and-jquery\" target=\"_blank\">reference</a>):</p>\n\n<pre class=\"brush: js\">/*\n* Handle tabs\n*/\n$('.article-adjunct-nav--item a').on('click', function(e)  {\nvar currentAttrValue = $(this).attr('href');\n// Show/Hide Tabs\n$(currentAttrValue).show().siblings().hide();\n// Change/remove current tab to active\n$(this).parent('li').addClass('active').siblings().removeClass('active');\ne.preventDefault();\n});\n</pre>\n\n<p id=\"10\" style=\" \">As simple as that. If you don't get what has been done, you could follow the hyperlink, and it has been explained line by line. If you just don't understand the chained methods, they're easy. Rather than receiving the result of one method in a variable and then applying another method on it, they've simply called them in sequence. All that the script does is finds out the target ID from the tab that was clicked on, unhides it, and hides the rest of its siblings.</p>\n\n<p id=\"11\" style=\" \">The CSS (or rather, the SASS) is more or less simple.</p>\n\n<pre class=\"brush: sass\">.article-adjunct{\ndisplay: block;\nposition: relative;\nwidth: 95%;\n@media(min-width: $screen-md){\nwidth: 55rem;\n}\nmargin: 0 auto;\nline-height: 1.5;\nletter-spacing: 1px;\nfont-size: 1.5rem;\ntext-align: justify;\n.article-adjunct-nav{\npadding: 10px 0 10px 0;\nborder: 1px solid $default-border-color;\nborder-left: none;\nborder-right: none;\nbox-shadow: none;\ndisplay: table;\nwidth: 100%;\na {\ntext-decoration: none;\ncolor: $link-default;\n}\n.article-adjunct-nav--list{\nlist-style: none;\ndisplay: table-row;\noverflow: hidden; \nposition: relative;\nwidth: 100%;\npadding: 5px 10px;\n}\n.article-adjunct-nav--item{\ndisplay: table-cell;\nwidth: 33%;\nposition: relative;\nbackground-color: darken($body-background-color, 30%);\nborder: 1px solid $button-border-color;\nborder-left: none;\ntext-align: center;\n&amp;:first-child{\nborder-left: 1px solid $button-border-color;\n}\n}\n}\n.article-adjunct-block{\ndisplay: block;\nposition: relative;\nborder: 1px solid $default-border-color;\nborder-top: none;\nborder-left: none;\nborder-right: none;\n@include border-radius(3px, 3px);\n.article-adjunct-tab{\ndisplay: none;\nposition: relative;\n&amp;.active{\ndisplay: block;\n}\n}  \n}\n}\n</pre>\n\n<p id=\"12\" style=\" \">The tabs must be equidistant, and since we know for sure that there are going to be 3 tabs only, we format them as table cells of equal width. Rest, we've just reused out <code>comment-containers </code> from the previous markup along with little reshuffling of their hierarchies. Clean?</p>\n\n<p id=\"13\" style=\" \">So, now it would be fair to say that our app's frontend design is complete, and we can now dive into the backend and then tie the two things up? Of course, we haven't implemented the 'Delete Annotation' method. But, we'll get back to that later.</p>\n\n<p id=\"14\" style=\" \">Except 1 thing. What if the user is a guest? Easy, just add one OR condition where annotations are loaded:</p>\n\n<pre class=\"brush: js\">...\n/* Also add to main container if the user is a guest. */\nif((parseInt(data[i]['user']['user_id']) === parseInt(annotations.currentUser['user_id']))||                                        \n(parseInt(annotations.currentUser['user_id'])===0)){\n...\n</pre>\n\n<p id=\"15\" style=\" \">The finished page looks like this pen below. I know the tabs at the bottom are a bit crude, but you could do the styling, no?</p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"zxVpqr\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/zxVpqr/\">Annotations Tutorial: Creating tabs at bottom of article</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<p id=\"16\" style=\" \">There! On to <a href=\"/C/course/computer-science/django/annotations-tutorial-setting-up-django-backend/19/\" target=\"_blank\">backend</a>!</p>\n", "pid_count": " 16"}


Converting Annotations Tutorial: User Form and annotation sorting
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this part of our per-paragraph commenting annotations app, we create a dynamic form to post annotations on any paragraph and add some customization to the visibility of these annotations.</p>\n\n<hr/>\n<p id=\"2\" style=\" \">In the <a href=\"/C/course/computer-science/django/annotations-tutorial-dynamically-rendering-per-paragraph-annotations/16/\" target=\"_blank\">previous tutorial</a>, we finally loaded the annotations (from fixtures albeit) and associated them with their respective content blocks. Thus, if data starts coming from the backend now, we can pretty much handle it provided the <i>interface specifications</i> are strictly adhered to. Now, we want to finish some unfinished tasks.</p>\n\n<p class=\"text-center\" id=\"3\" style=\" \"><img alt=\"Bucket Lists\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/09/annotations_7_1.jpg\" style=\" \"/><small><a href=\"http://thejuniornomads.com.au/wp-content/uploads/2013/05/bucketlist.jpg\" rel=\"nofollow\" target=\"_blank\">(Image Credits)</a></small></p>\n\n<p id=\"4\" style=\" \">So far, the user has been able to only see what has been made already. There has been no means to add one's own annotations to the page. In this post, we take care of that lack by creating an annotation form.</p>\n\n<p id=\"5\" style=\" \">Also, so far, we've just seen that there are annotations. We haven't been able to see who made them (even though we put the user information in the fixtures in the last tutorial). So, we'd like to rectify that too.</p>\n\n<p id=\"6\" style=\" \">As another personalization to annotations, we'll by default neatly tuck in the annotations from other people into a small tab. The reason for doing so lies in the ends we are trying to achieve. Annotations are like the scribblings done on the margins of a book. I wouldn't like it if someone else scribbled in my books. The sense of ownership is lost. Similarly, annotations are supposed to be a personal thing. So, by default we must not be seeing other's annotations even if they don't mind us seeing theirs, just like they won't mind us reading their books. So, if you deliberately want to see what others might have said or thought about a particular para, you can look by expanding the tab with a single click, but not before that.</p>\n\n<ol id=\"7\">\n\t<li>Add form to page and test posting.</li>\n\t<li>Add user information fetched in JSON.</li>\n\t<li>Hide annotations from other people</li>\n</ol>\n\n<p id=\"8\" style=\" \">So, let's get started.</p>\n\n<p id=\"9\" style=\" \">We would like to see the users image and their name before their annotations. So, for prototyping, we'll reuse the template from <a href=\"/C/course/computer-science/django/annotations-tutorial-drawing-the-per-paragraph-comment-layout/13/\" target=\"_blank\">this previous</a>tutorial.</p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"jEomEV\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/jEomEV/\">Annotations (Rolled out state)</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<p id=\"10\" style=\" \">Our markup of a comment would change. What was just a span element once now becomes the following:</p>\n\n<pre class=\"brush: html\">  &lt;div class=\"comments-container-item\"&gt;\n  &lt;div class=\"comments-container--media\"&gt;\n  &lt;img src=\"images/male.png\"/&gt;\n  &lt;/div&gt;\n  &lt;div class=\"comments-container--block\"&gt;\n  &lt;a href=\"#\"&gt;&lt;span class=\"comments-author-name\"&gt;John Doe&lt;/span&gt;&lt;/a&gt;\n  &lt;span class=\"comments-container--text\"&gt;Lorem Ipsum &lt;/span&gt;\n  &lt;/div&gt;\n  &lt;/div&gt;\n</pre>\n\n<p id=\"11\" style=\" \">Also, the CSS (Sass in our case) will also need updation:</p>\n\n<pre class=\"brush: sass\">  .comments-container-item{\n    padding-top: 10px;\n    margin-bottom: 10px; \n    \n    .comments-container--media{\n      position: relative;\n      float: left;\n      width: 32px;\n      height: 32px;\n      margin: 0;\n      border: 1px solid $image-borders;\n      img{\n        width:100%;\n        height:100%;\n        overflow: hidden;\n        margin:0;\n        padding: 0;\n        border: none;\n      }\n    }\n    .comments-container--block{\n      padding-left: 40px;\n      position: relative;\n      padding-right: 5px;\n      padding-top: 5px;\n      a {\n        color: $link-default;\n        text-decoration: none;\n      }\n      .comments-author-name{\n        position: relative;\n        font-size: 1.3rem;\n        font-style: none;\n        text-decoration: none;\n      }\n      .comments-container--text{\n        display: block;\n        position: relative;\n        font-size: 1.2rem;\n      }\n    }\n    &amp;:first-child{\n    padding-top: 5px;\n    }\n  }\n</pre>\n\n<p id=\"12\" style=\" \">Note that we've kept a bottom margin of 10px. This is because we might want to add some additional controls at the bottom of each annotation later, for example, a 'reply' option, or 'flag as inappropriate'. So, better keep the space ready now.</p>\n\n<p id=\"13\" style=\" \">Most other things are more or less obvious. We've used a fixed size image as avatar pic, and it is floated to the left. The content block makes way for it by leaving the necessary padding.</p>\n\n<p id=\"14\" style=\" \">One issue that cropped up was in giving the avatar a hyperlink to the profile, like the user name had. It did not work. Laziness took the best of me there, and I did not prod further, I was just putting it there as an extra link. Most likely, that is being caused due to the z-index values conflicts. So, if need be, we'll look into it later.</p>\n\n<p id=\"15\" style=\" \">Also, we would like to tuck in other people's annotations. So, why not make that container now itself?</p>\n\n<pre class=\"brush: html\">  &lt;div class=\"comments-container-bucket hidden\"&gt;\n  &lt;div class=\"comments-container-item\"&gt;\n  &lt;div class=\"comments-container--media\"&gt;\n  &lt;img src=\"images/female.png\"/&gt;\n  &lt;/div&gt;\n  &lt;div class=\"comments-container--block\"&gt;\n  &lt;a href=\"#\"&gt;&lt;span class=\"comments-author-name\"&gt;John Doe&lt;/span&gt;&lt;/a&gt;\n  &lt;span class=\"comments-container--text\"&gt;Your documentation source should be written as regular Markdown files, \n  and placed in a directory somewhere in your project. \n  Normally this directory will be named docs and will exist at the top level of your project, \n  alongside the mkdocs.yml configuration file. &lt;/span&gt;\n  &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;/div&gt;\n</pre>\n\n<p id=\"16\" style=\" \">And its styles:</p>\n\n<pre class=\"brush: sass\">  .comments-bucket-toggle{\n    display: block;\n    position: relative;\n    width: 100%;\n    padding: 2px;\n    background-color: $btn-default-color;\n    border: 1px solid $button-border-color;\n    @include border-radius(2px, 2px);\n    font-size: 1rem;\n    text-align: center;\n    &amp;.folded:before{\n    \tcontent:\"Load\";\n    }\n    &amp;.unfolded:before{\n    \tcontent: \"Hide\";\n    }\n    }\n    .comments-container-bucket{\n    \tposition: relative;    \n  }\n</pre>\n\n<p id=\"17\" style=\" \">Yep, there isn't much to style the bucket, but only its button.</p>\n\n<p id=\"18\" style=\" \">Lastly, the form to post an annotation:</p>\n\n<pre class=\"brush: html\">  &lt;div class=\"comments-form-block\"&gt;\n  &lt;form class=\"comments-form\" id=\"annotation_form\"&gt;\n  &lt;textarea id=\"comments-form-text\" class=\"comments-form--user-input\" \n  placeholder=\"Make a note\" form=\"annotation_form\" cols=\"40\" rows=\"3\" maxlength=\"500\"&gt;&lt;/textarea&gt;\n  &lt;button class=\"comments-submit\" id=\"comments-form-submit\" type=\"submit\"&gt;Submit&lt;/button&gt;\n  &lt;/form&gt;\n  &lt;/div&gt;\n</pre>\n\n<p id=\"19\" style=\" \">Styles:</p>\n\n<pre class=\"brush: sass\">  .comments-form-block{\n    position: relative;\n    display:block;\n    .comments-form{\n    position: relative;\n    .comments-form--user-input{\n        position: relative;\n        display: block;\n        @include border-radius(2px,2px);\n        border: 1px solid $image-borders;\n        font-size: 1.2rem;\n      }\n      .comments-submit{\n        position: relative;\n        display:inline-block;\n        text-align: center;\n        margin-top: 2px;\n        vertical-align: middle;\n        cursor: pointer;\n        font-size: 1.2rem;\n        line-height: 1.7;\n        @include border-radius(4px, 4px);\n        background-color: $btn-primary-color;\n        border: 1px solid lighten($btn-primary-color, 10%);\n      }\n    }\n  }\n</pre>\n\n<p id=\"20\" style=\" \">Now that our basic markup is done, we'd like to get to the scripting part. There are three things we'd want to do right now.</p>\n\n<ol>\n\t<li id=\"21\">If the user clicks on 'Load other annotations', other annotations must become visible.</li>\n\t<li id=\"22\">If the user writes something in the annotation and clicks 'Post', it must add as annotation.</li>\n\t<li id=\"23\">Each content where annotation can be created must get the form to post on when the user clicks there.</li>\n</ol>\n\n<p id=\"24\" style=\" \">But first, we have to move our form out of the markup, and into our script, since we don't have these elements on our most recent page.</p>\n\n<p id=\"25\" style=\" \">This will need little changes:</p>\n\n<p id=\"26\" style=\" \">In the method <code>renderAnnotations() </code>, we now write:</p>\n\n<pre class=\"brush: js\">  /* Find the annotations container inside that and append the comment */\n  currentComment = $('&lt;div class=\"comments-container-item\"&gt;'+\n  \t\t'&lt;div class=\"comments-container--media\"&gt;'+\n  \t\t'&lt;img class=\"comments-author-image\" src=\"\"/&gt;'+\n  \t\t'&lt;/div&gt;'+\n  \t\t'&lt;div class=\"comments-container--block\"&gt;'+\n \t\t '&lt;a class=\"comments-author-link\" href=\"#\"&gt;&lt;span class=\"comments-author-name\"&gt;&lt;/span&gt;&lt;/a&gt;'+\n  \t\t'&lt;span class=\"comments-container--text\"&gt;&lt;/span&gt;'+\n  \t\t'&lt;/div&gt;'+\n  \t\t'&lt;/div&gt;');\n  \t\t/* Create the annotation */\n\tcurrentComment.find('.comments-author-image').attr('src', data[i]['user']['user_gravatar']);\n  \tcurrentComment.find('.comments-author-name').text(data[i]['user']['user_name']);\n  \tcurrentComment.find('.comments-author-link').attr('href',data[i]['user']['user_url']);\n  \tcurrentComment.find('.comments-container--text').text(data[i]['annotation_body']);\n  if(parseInt(data[i]['user']['user_id']) === parseInt(annotations.currentUser['user_id'])){\n  /* Append to main visible list*/\n  currentObject.find('[id *=\"user_annotations_\"]').append(currentComment);\n  }\n  else{\n  /* Append to the folded list */\n  currentObject.find('[id *=\"other_annotations_\"]').append(currentComment);\n  /* Now that we have other annotations, unhide the show button too */\n  currentObject.find('.comments-bucket-toggle').show();\n  /* Bind event to show fold or unfold other annotations*/\n  currentObject.find('.comments-bucket-toggle').on('click', toggleOtherAnnotations);\n  if(!currentObject.find('.comments-bucket-toggle').hasClass('unfolded')){\n  currentObject.find('.comments-bucket-toggle').removeClass('unfolded');\n  currentObject.find('.comments-bucket-toggle').addClass('folded');\n  }\n  }\n</pre>\n\n<p id=\"27\" style=\" \">instead of simply appending a span element. We've made one quick change in the html markup here. Now, even the user annotations are wrapped in a bucket, and both buckets have been given unique IDs. This is to ease our appending process. We wanted to do that personalization thing, remember?</p>\n\n<p id=\"28\" style=\" \">Second, we're adding attributes to the 'Author' of the annotations now. If there are annotations created on that part by other users, we add their comments to the ' <code>other_annotations </code>' bucket and also unhide our 'Show annotations' button. Otherwise, it stays hidden.</p>\n\n<p id=\"29\" style=\" \">Okay. So, now that the user can make annotations, we will assume that the user information is present on the page right now as:</p>\n\n<pre class=\"brush: js\">annotations.currentUser = {\nuser_id: \"1\",\nuser_name: \"John Doe\",\nuser_gravatar: \"images/male.png\",\nuser_url: \"#\",\n};\n</pre>\n\n<p id=\"30\" style=\" \">Now, write the method to handle what happens on click as:</p>\n\n<pre class=\"brush: js\">var postAnnotation = function(e){\n/* Construct a JSON string of the data in annotation. */\n/* First find the parent's para-id */\nid = parseInt($(this).parents(\".annotation--container\").attr(\"data-section\"));\nconsole.log(\"Para ID: \"+ id);\n/* Current text must not be empty. Though this must be taken care of in HTML5 required flag*/\nbody = $(\"#comments-form-text\").text();\nconsole.log(body);\nif(body === ''){\nconsole.log('Error. Body has no content.')\n}\n/* create a fixture */\ncontent = [\n{\ncontent_id: \"1\",\nparagraph_id: id,\nannotation_body: body,\nuser : annotations.currentUser,\n}\n];\n/* Return object */\nrenderAnnotations(content);\n}\n</pre>\n\n<p id=\"31\" style=\" \">Here, we're reusing our renderAnnotations method (that is what we had made it for, right?). The server is expected to return a list of annotation objects. When the user posts, only a single annotation would be returned. So, the content fixture is essentially that object.</p>\n\n<p id=\"32\" style=\" \">Now, bind it to the click button:</p>\n\n<pre class=\"brush: js\">$(\"#comments-form-submit\").on('click', postAnnotation);\n</pre>\n\n<p id=\"33\" style=\" \">To show or hide other annotations for each block, add the following:</p>\n\n<pre class=\"brush: js\">var toggleOtherAnnotations = function(e){\nif($(this).hasClass('folded')){\n/* Unfold the annotations */\n$(this).removeClass('folded').addClass('unfolded')\n$(this).next().removeClass('hidden');\n}\nelse{\n/* Fold the annotations */\n$(this).removeClass('unfolded').addClass('folded')\n$(this).next().addClass('hidden');                        \n}\n}\n</pre>\n\n<p id=\"34\" style=\" \">So far, we haven't yet shown the form to anyone, lets write the routines for that:</p>\n\n<pre class=\"brush: js\">/**\n* showForm\n* \n* @brief Attaches the form to the current content block\n*/\nvar showForm = function(id){\nconsole.log('Show form in '+id);\n/* Clear out form contents, if any. */\nannotations.formElement.find($('#comments-form-text')).val('');\n/* Find the current block, detach the form from previous and prepend here */\nannotations.formElement.find(\"#comments-form-submit\").unbind('click', postAnnotation);\nannotations.formElement.detach();\n$('*[data-section-id=\"'+id+'\"]').find('.comments-container').prepend(annotations.formElement);        \n/*\n* bind the postAnnotation to the form button.\n*/\nannotations.formElement.find(\"#comments-form-submit\").on('click', postAnnotation);\n};\nvar hideForm = function(){\nconsole.log('Hide Form');\nannotations.formElement = $('.comments-form-block');\n/*\n* unbind event\n*/\nannotations.formElement.find(\"#comments-form-submit\").unbind('click', postAnnotation);\nannotations.formElement.detach();\n};\n</pre>\n\n<p id=\"35\" style=\" \">Only a single instance of this form exists on the page. Once loaded, it will be shuttled between blocks.</p>\n\n<p id=\"36\" style=\" \">We can invoke the show form when we click on the annotation bubble, and it will be hidden if we chose a different annotation, click elsewhere on the screen, or click on the annotation bubble again.</p>\n\n<p id=\"37\" style=\" \">Something is not right. Our form disappears after making a few annotations. The reason is that once attached, the jQuery object has changed, and we are again and again referencing the same variable without updating it.</p>\n\n<p id=\"38\" style=\" \">So, lets fix that.</p>\n\n<pre class=\"brush: js\">var showForm = function(id){\nconsole.log('Show form in '+id);\nconsole.log($('.comments-form-block'));\nif($('.comments-form-block').length != 0){\n/* The form has been attached somewhere. */\n/* Clear out form contents, if any. */\nconsole.log('Attached elsewhere');\nannotations.formElement = $('.comments-form-block'); \nannotations.formElement.find($('#comments-form-text')).val('');\n/* Find the current block, detach the form from previous and prepend here */\nannotations.formElement.find(\"#comments-form-submit\").unbind('click', postAnnotation);\nannotations.formElement.detach();\n}\n/* Else it is pointing to the object not yet appended */\n$('*[data-section-id=\"'+id+'\"]').find('.comments-container').prepend(annotations.formElement);        \n/*\n* bind the postAnnotation to the form button.\n*/\nannotations.formElement.find(\"#comments-form-submit\").on('click', postAnnotation);\n//                console.log('Printing');\n//                console.log($('.comments-form-block'));\n};\nvar hideForm = function(){\nconsole.log('Hide Form');\nif($('.comments-form-block').length &gt;0){\nannotations.formElement = $('.comments-form-block');\n/*\n* unbind event\n*/\nannotations.formElement.find(\"#comments-form-submit\").unbind('click', postAnnotation);\nannotations.formElement.detach();                        \n}\n};\n</pre>\n\n<p id=\"39\" style=\" \">Okay, so, we'll detach only once if the form is found on the document. Also, before rendering the form, we'll check if it exists on some other node before.</p>\n\n<p id=\"40\" style=\" \">That does it. How does the page look now? Mine looks like the one in this pen below:</p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"raEMeO\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/raEMeO/\">Annotations Tutorial: Annotation Form and Sorting into buckets</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<p id=\"41\" style=\" \">In the <a href=\"/C/course/computer-science/django/annotations-tutorial-collecting-orphaned-per-paragraph-comments-in-buckets/18/\" target=\"_blank\">last leg</a> of this frontend design, we will deal with orphaned annotations, in case the content block on which user made an annotation is deleted or thoroughly updated (that is replaced by another which would be given a different ID).</p>\n", "pid_count": " 41"}


Converting Annotations Tutorial: Dynamically rendering per-paragraph annotations
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this part of our per-paragraph commenting annotations app, we emulate the loading of annotations like they would with Ajax calls, and then associate each annotation with its respective content-block.</p>\n\n<hr/>\n<p class=\"text-center\" id=\"2\" style=\" \"><img alt=\"Sticky notes sticking out of novel pages\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/08/annotations_6_1.jpg\" style=\" \"/><small><a href=\"http://i0.wp.com/ny.chalkbeat.org/sites/default/files/2014/01/IMG_0282.jpg\" rel=\"nofollow\" target=\"_blank\">(Image Credits)</a></small></p>\n\n<p id=\"3\" style=\" \"><a href=\"/C/course/computer-science/django/annotations-tutorial-adding-user-interactivity-with-jquery/15/\" target=\"_blank\">So far</a>, the annotations were just there when the page loaded as our page samples were fairly static. This means that the page was pieced together by the server before it was sent to the client browser where Javascript did what it did. While this could very well be the case, it seems like the content rendering and the annotation rendering engines are the same, or at least closely coupled. But loosely coupled, app-based designs are proliferating nowadays for they offer much more flexibility in terms of design, and are more easy to scale. Also, it makes a lot more sense.</p>\n\n<p id=\"4\" style=\" \">There are a few more considerations too.</p>\n\n<ol>\n\t<li id=\"5\">What the user primarily wants is to read the main content. I think that is the major motive why he/she is visiting the page, right? Thus, that part of the page must load with minimum hitch and clutter. If the user has a slow internet connection, there will be two things that would happen. First, if all data is collated and served in a single go, he'll only see the page once everything has arrived from the server. Until then he might see the text, but in a poorly formatted fashion (since CSS might not have loaded, or scripts are still waiting for the page to load completely). And second, the Javascripts usually work after the page is ready. Thus if Annotations are interspersed in between the main article, they are a nuisance to look at, big time. So, it would be much better if the loading of annotations can be delegated to a time after the main content has loaded.</li>\n\t<li id=\"6\">Annotations can also be made on the fly. That is why we are making them as close to the content, on the margin of the leaf. We haven't yet designed the form, but we'll do so in due time. We had wished that the user must not have to reload the page after posting each annotation he makes. This means, that we'd be using Ajax calls to post annotations in the future and updating the DOM through Javascript. In that event, a single annotation will be coming and going on the wire (when we are making the annotation). So, if it can come once, it can also come twice, or any number of time using the same Ajax methods. Then, why do we have to load the first instance through a different path of backend handling?</li>\n</ol>\n\n<p id=\"7\" style=\" \">So what we would like to do now, is to start from a state where there is no annotations belonging to any container. Also, you will remember that the boxed-up approach for clubbing the content and its annotations was done later. The base application (which renders the original content) may not want to change its template. Thus, we'll take care of manipulating the DOM to create those containers when annotations are loaded. Thus, here is our agenda:</p>\n\n<ol id=\"8\">\n\t<li>Load the page with as little as possible markup.</li>\n\t<li>Load annotations through Javascript (using fixtures in this case).</li>\n\t<li>Transform the page so that we may reach the state we demonstrated in iteration 4.</li>\n</ol>\n\n<p id=\"9\" style=\" \">There are still a few pre-requisites for the markup though. It is loosely coupled, not completely decoupled design.</p>\n\n<ol id=\"10\">\n\t<li>The outermost block on which annotations would work must have the class</li>\n\t<li>Content blocks must have unique IDs</li>\n</ol>\n\n<p id=\"11\" style=\" \">Here, one may raise a doubt that when we are making an effort to have unique IDs for each content block and also having an identifier wrapping them all up, what is the problem with loading more markup so that the coupling of content-block and its annotations is rendered by the server itself. It is true, and I think this middle ground between everything on frontend and everything at backend is quite amicable. So, what we can do is load the skeleton layout from the backend rather than javascript manipulating the DOM to such extensive degree, while the Javascript may later fetch the annotations and put them in their respective containers. The only constraint placed in the backend template must be that it must not in any manner mess with the overall layout of content in case the Javascript fails to load.</p>\n\n<p id=\"12\" style=\" \">But for the current tutorial, we'll continue with our original idea, that the backend provides minimal markup while Javascript does the heavy-lifting.</p>\n\n<p id=\"13\" style=\" \">Other than that, there are a few bug-fixes we'd introduce.</p>\n\n<ol>\n\t<li id=\"14\">On mobile resolutions, when we click the annotations button, the sliding out is too abrupt. In fact, there is no sliding out. We'll smoothen that.</li>\n\t<li id=\"15\">The rolling out of content from the viewport on mid-size screens is smooth, but rolling back in isn't.</li>\n\t<li id=\"16\">The annotations must disappear if we click anywhere else on the screen.</li>\n</ol>\n\n<p id=\"17\" style=\" \">On with it!</p>\n\n<p id=\"18\" style=\" \">First, the markup looks like it was in iteration 1, except that the paragraphs now have an ID, and the overall block has an ID. That is as much markup we want to start with. The stylesheets would stay the same as we left in iteration 4.</p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"OPYLop\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/OPYLop/\">Annotations Tutorial (Part 1): Final</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<p id=\"19\" style=\" \">Now, all is left for the Javascript to fill in data. We'll break it down into finite steps.</p>\n\n<ol>\n\t<li id=\"20\">When the page loads, we need to find the container we must work on.</li>\n\t<li id=\"21\">For each immediate child of that block, we wrap the child in the annotation grouping <code>div </code>.</li>\n\t<li id=\"22\">In each annotation grouping container, we append the annotations container, and the button.</li>\n\t<li id=\"23\">Load annotations from fixtures.</li>\n\t<li id=\"24\">Update the annotation count in the annotation speech bubble.</li>\n</ol>\n\n<p id=\"25\" style=\" \">Okay, in the current implementation, we could shift the 4th and 5th steps a little bit up to save an iteration. But let it stay that way for a while (for reasons that will become apparent, if they aren't yet).</p>\n\n<p id=\"26\" style=\" \"><strong>Find the container we want to work on:</strong></p>\n\n<pre class=\"brush: js\">var annotationCopy = $('#commentable-container').clone(true,true);\n</pre>\n\n<p id=\"27\" style=\" \">We have two options, either we could remove the element from flow, and reinsert it later after we had worked on it; or we can work on each child in the flow itself. But the second approach would be taxing (I'm not exactly sure though). In the article '<a href=\"/bookmarks/speeding-up-javascript-working-with-the-dom/6/\" target=\"_blank\">Speeding up JavaScript: Working with the DOM</a>', it is recommended that we \"<em>create multiple elements and insert them into the DOM triggering a single reflow. It uses something called a DocumentFragment. We create a DocumentFragment outside of the DOM (so it is out-of-the-flow). We then create and add multiple elements to this. Finally, we move all elements in the DocumentFragment to the DOM but trigger a single reflow.</em>\". We're not exactly using a DOM Fragment, but yes, we're making elements out-of-the-flow and only inserting them once we are done, so that there is only one reflow.</p>\n\n<p id=\"28\" style=\" \">Now, why did we clone it? If we just removed the entire container out of the flow, how would we know where we have to re-insert it later? For that, we'd either need to leave a placeholder there, which means creating a placeholder and inserting it there. Also if, God forbid, something went wrong with the Javascript in between (though that shouldn't really happen in production version) the reader would be left searching for the content in the want of what, annotations? Clearly content is more important to the reader.</p>\n\n<p id=\"29\" style=\" \">Also note that we've not just cloned the element, but also retained all the event handler and data attributes. That is just because we don't want to <em>assume</em> that our's will be the only or the first script to run on that content. We clearly don't want to annul anyone else's script effects.</p>\n\n<p id=\"30\" style=\" \"><strong>For each immediate child of the block, wrap the block in an annotation grouping:</strong></p>\n\n<pre class=\"brush: js\">annotationCopy.children().each(wrapContent);\n</pre>\n\n<p id=\"31\" style=\" \">Where <code>wrapContent </code> is:</p>\n\n<pre class=\"brush: js\">var wrapContent = function(){\nindex = parseInt($(this).attr('id'));\n$(this).wrap('&lt;div class=\"annotation--container clearfix\" data-section-id=\"'+index+'\"&gt;&lt;/div&gt;');}\n</pre>\n\n<p id=\"32\" style=\" \"><strong>Append annotation container:</strong></p>\n\n<p id=\"33\" style=\" \">In the <code>wrapContent </code> method, append the following lines:</p>\n\n<pre class=\"brush: js\">$('&lt;div class=\"comments clearfix\"&gt;'+ \n  '&lt;h3 class=\"comments--toggle rectangular-speech\"&gt; &lt;/h3&gt;&lt;p&gt;+\n  &lt;/p&gt;'+ \n  '&lt;div class=\"comments-container hidden\"&gt;'+ \n  '&lt;/div&gt;&lt;/div&gt;').insertAfter($(this));\n</pre>\n\n<p id=\"34\" style=\" \">At this time, we've covered fair ground. So, let us reload the page to see how it looks. How does it look? Mine looks fine. I can now see annotation bubbles when I hover on their respective content blocks. Check the markup too (in the inspector to make sure the insertion and appending worked well.</p>\n\n<p id=\"35\" style=\" \"><strong>Load annotations:</strong></p>\n\n<p id=\"36\" style=\" \">Now that we've done the necessary groundwork, let us just load the annotations from fixed fixture for now. Later, they'll be served from the server via Ajax calls.</p>\n\n<p id=\"37\" style=\" \">But it would be good time to see what information we would want the annotations to contain so that they can be rendered and associated with:</p>\n\n<ol id=\"38\">\n\t<li>Annotation content.</li>\n\t<li>The content on which they were created.</li>\n\t<li>The user who created the annotation.</li>\n</ol>\n\n<pre class=\"brush: js\">{\ncontent_id: \"1\",\nparagraph_id: \"1\",\nannotation_body: \"Lorem Ipsum\",\nuser : {\nuser_id: \"1\",\nuser_name: \"John Doe\",\nuser_gravatar: \"images/default_large.png\",\nuser_url: \"#\",\n},\n}\n</pre>\n\n<p id=\"39\" style=\" \">I guess this is self-explanatory? What we will receive from the server will be a list of such objects encoded as JSON, and we'll parse them into our markup.</p>\n\n<p id=\"40\" style=\" \">Now, let's see how the call will take place later. We'll make an Ajax call to load annotations, and it will return asynchronously. For a successful response, we will have registered a callback function to which, control will be passed when the server replies. This function must then take that JSON formatted data, and render it into our markup. When we already know this much, let us write placeholder functions which can later be expanded for more complex tasks, like making the ajax query.</p>\n\n<p id=\"41\" style=\" \">First, we declare a few hand-code fixtures:</p>\n\n<pre class=\"brush: js\">fixtures = [\n    {\n        content_id: \"1\",\n        paragraph_id: \"1\",\n        annotation_body: \"Lorem Ipsum\",\n        user : {\n            user_id: \"1\",\n            user_name: \"John Doe\",\n            user_gravatar: \"images/default_large.png\",\n            user_url: \"#\",\n            },\n    },\n    {        \n    content_id: \"1\",\n    paragraph_id: \"1\",\n    annotation_body: \"Your documentation source should be written as regular Markdown files, and placed in a directory somewhere in your project.\",\n    user : {\n        user_id: \"2\",\n        user_name: \"Someone Else\",\n        user_gravatar: \"images/female.png\",\n        user_url: \"#\",\n        },\n    },\n    {        \n    content_id: \"1\",\n    paragraph_id: \"6\",\n    annotation_body: \"But we have to make tradeoffs to make something work\",\n    user : {\n        user_id: \"1\",\n        user_name: \"John Doe\",\n        user_gravatar: \"images/default_large.png\",\n        user_url: \"#\",\n        },\n    }\n];\n</pre>\n\n<p id=\"42\" style=\" \">As you can see, it is an array of objects with each object having a similar structure.</p>\n\n<pre class=\"brush: js\">var loadAnnotations = function(){\nrenderAnnotations(fixtures);\n};\n</pre>\n\n<p id=\"43\" style=\" \">This function currently makes a direct call into <code>renderAnnotations() </code> method as if the data was available. By doing this, we are trying to emulate how our Ajax call would have called that method.</p>\n\n<pre class=\"brush: js\">var renderAnnotations = function(data){\nconsole.log('Data received: ');\nfor(i=0; i&lt; data.length;i++){\n/* Find the parent container */\ncurrentObject = annotationCopy.children('[data-section-id=\"'+data[i]['paragraph_id']+'\"]');\n/* Find the annotations container inside that and append the comment */\ncurrentComment = $('');\ncurrentComment.text(data[i]['annotation_body']);\ncurrentObject.find('.comments-container').append(currentComment);\n/* Update the annotation count on the button */\ntemp = currentObject.find('.comments--toggle p').text();\ncommentCount = ((temp = currentObject.find('.comments--toggle p').text()) ==='+') ? 1 : (parseInt(temp)+1);\ncurrentObject.find('.comments--toggle p').text(commentCount);\n}\n};\n</pre>\n\n<p id=\"44\" style=\" \">Here, we iterate through all the data objects passed into the method, and try to find their parent containers (which we had created in the previous step). We are not doing any sorting here, just pick and drop, assuming that the backend server has taken care of ordering them for us according to some rule (sort by creation date, maybe?).</p>\n\n<p id=\"45\" style=\" \">For each annotation, we create its markup, and append it to the end of the <code>comment-container </code>, and also update its comment count. Note that this function does not assume how many comments are there before, or how many have come. This implies that we can reuse this method as it is at a later stage when we post new comments, and rest assured that the comment count will be updated, and the new annotation will be visible as soon as it is successful without disturbing the rest of the annotations.</p>\n\n<p id=\"46\" style=\" \"><strong>Update page:</strong></p>\n\n<p id=\"47\" style=\" \">Now that we've done all our processing, we can finally reattach our DOM subtree we've been morphing, into the DOM which will cause 1 reflow.</p>\n\n<pre class=\"brush: js\">$('#commentable-container').replaceWith(annotationCopy);\n</pre>\n\n<p id=\"48\" style=\" \">Then, we bind to the annotation bubbles to toggle the viewing and hiding of annotations.</p>\n\n<pre class=\"brush: js\">bindAnnotations();\n</pre>\n\n<p id=\"49\" style=\" \">Okay, so far so good. We've squeezed the elephant, now the only thing left is its tail. Let us attend to the minor bugs we mentioned at the beginning of the post.</p>\n\n<ol>\n\t<li id=\"50\">\n\t<p style=\" \"><strong>Transitions aren't smooth.</strong></p>\n\n\t<p style=\" \">Add the following to #annotations-container:</p>\n\n\t<pre class=\"brush: sass\">@media(min-width: $screen-md) and (max-width: $screen-lg){\ntransition: all 1s;        \n}\n</pre>\n\n\t<p style=\" \">The reason why it wasn't working on folding is because it was being applied to the class ' <code>annotations-active </code>' and when we clicked on the bubble, we removed that class. So, rather than changing the property, we were removing it altogether, and hence, it won't transition.</p>\n\n\t<p style=\" \">For the drop down effect, we are in a fix. I just discovered that CSS transitions will not work on <code>display </code> property. The reason is again the same as above. When we remove that class (hidden), it just ceases to exist, the browser doesn't make it fade away, but whoosh, it's gone. A few people recommended not touching the <code>display: block </code> property, but playing with the height and opacity properties. I did, but they too aren't producing the desirable effects. Another person suggested using the <code>keyframes </code> to control how animations occur. I tried that, and the results are just as good as fiddling with the height and opacity properties.</p>\n\n\t<pre class=\"brush: sass\">@keyframes fadeIn {\nfrom { opacity: 0; }\nto { opacity: 1; }\n}\n@mixin animation($function: fadeIn, $duration: .3s){\n-webkit-animation: $function $duration;\nanimation: $function $duration;\n}\n</pre>\n\n\t<p style=\" \">And using it in <code>.comments-container </code>:</p>\n\n\t<pre class=\"brush: sass\">@include animation(fadeIn, .15s);\n</pre>\n\n\t<p style=\" \">This isn't the most elegant solution, but certainly better than the abrupt nature of the previous versions. For a more smooth effect, I think we'll resort to jQuery, but later and only if it is too important.</p>\n\t</li>\n\t<li id=\"51\">\n\t<p style=\" \"><strong>Annotations must fold back on clicking anywhere other than the annotation.</strong></p>\n\n\t<p style=\" \">We'll use the ' <code>closest() </code>' method from jQuery, to find out if we are anywhere in the vicinity of the annotation we were working on. If we aren't, we can toggle it off. If we are, then we probably don't want to toggle them off yet.</p>\n\n\t<p style=\" \">Thus, we'll bind a click event to the entire document if any annotation is active. This event must be unbound when there are no annotations selected.</p>\n\n\t<p style=\" \">So, inside the ' <code>toggleAnnotations() </code>' method, we'd add the following lines for binding. Note that we add it <em>before</em> we've updated our elements.</p>\n\n\t<pre class=\"brush: js\">if(annotations.currentAnnotation === 0){\n$(document).on('click', function(e) {\nconsole.log('Trigger');\n//console.log($(event.target));\n//console.log($(event.target).closest('.side-comment').length);\n/*\n* If the element we clicked on is not close to the comments,\n* close the annotations then.\n*/\nif (!($(e.target).closest('.comments').length)){\n/* Hide all other annotations */\n$('.comments').children('.comments-container').addClass('hidden');\n$('*[data-section-id=\"'+annotations.currentAnnotation+'\"]').find('.comments--toggle').removeClass('annotation-highlight');\n$('#commentable-container').removeClass('annotations-active');\n/* Reset the currently selected Annotation state */\nannotations.currentAnnotation = 0;\n}\n});\n}\n/* OR the other method */\n$('*[data-section-id=\"'+annotations.currentAnnotation+'\"]').find('.comments--toggle').removeClass('annotation-highlight');...\n</pre>\n\n\t<p style=\" \">And then, we add the unbind method, inside the if condition of collapsing:</p>\n\n\t<pre class=\"brush: js\">$(document).unbind();\n</pre>\n\n\t<p style=\" \">Simple?</p>\n\t</li>\n</ol>\n\n<p id=\"52\" style=\" \">Here is the completed pen</p>\n\n<div>\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"bNyPrL\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/bNyPrL/\">Annotations tutorial: Dynamically loading annotations</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<p id=\"53\" style=\" \">With this, we have fairly completed our frontend design. Except one minor thing. We have no form to create annotations. Nor can we delete any. Also, we wouldn't want anonymous annotations, because privacy belongs to the ones with names, the anonymous have nothing to lose. We will complete the form and posting part in our <a href=\"/C/course/computer-science/django/annotations-tutorial-user-form-and-annotation-sorting/17/\" target=\"_blank\">next tutorial</a>, and leave the deletion part for later parts, though it isn't much of a hassle. (It's because I forgot when I was actually doing it, and only later did it occur to me that I was missing a very basic thing in CRUD.) So long!</p>\n", "pid_count": " 53"}


Converting Annotations Tutorial: Adding user interactivity with jQuery
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this part of the per-paragraph commenting tutorial series, we are going to add the first bits of interactivity using Javascript to what we have acheived so far using purely CSS3 effects on HTML. The annotations must become visible when the user clicks on their bubbles, and not before.</p>\n\n<hr/>\n<p id=\"2\" style=\" \">Now that the basic layout and how things should look like in <a href=\"/C/course/computer-science/django/annotations-tutorial-speech-bubbles/12/\" target=\"_blank\">collapsed state</a> and <a href=\"/C/course/computer-science/django/annotations-tutorial-drawing-the-per-paragraph-comment-layout/13/\" target=\"_blank\">expanded states</a> have been visualized, we now move on to adding interactivity to them. In this section, we will add some user interactivity to the annotations - By default, the annotations must not be visible, but their speech buttons must be visible near the paragraph they are associated with, so that we have something we could click on. When the user clicks on the annotation button, the annotations become visible. Only the annotations corresponding to the content being clicked on should be visible, while safely hiding the rest.</p>\n\n<p id=\"3\" style=\" \">Okay? Okay!</p>\n\n<p class=\"text-center\" id=\"4\" style=\" \"><img alt=\"User interactivity in per-paragraph commenting app\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/07/annotation_4_1.png\" style=\" \"/></p>\n\n<p id=\"5\" style=\" \">We could start off from readymade jQuery solutions, like the accordion, but spending few moments fiddling with it, I surmised that it would be better if we wrote one for ourselves which could handle both horizontal and vertical rolling out of our annotations.</p>\n\n<p id=\"6\" style=\" \">When I had originally started to develop this part of the per-paragraph annotations, I was a toddler with vanilla javascript and knew much too little of jQuery. Various people on discussion forums advices practicing vanilla JS and to get comfortable with it before getting to use jQuery for jQuery made things\u2026 a little too easy. So, I did make the entire thing in vanilla JS as much as possible, but couldn't help cheating when it came to Ajax calls. I did manage to do it (and the first version of annotations on PirateLearner runs on that code as of April 2015, so in case you are interested, you can look into that), but while doing so, I realized that I was reinventing the wheel, a lot. So, now I bring in the knowledge of the entire wheel, jQuery. We'll start to work on where we left off last time, using the same <a href=\"http://codepen.io/anshulthakur/pen/jEomEV/\" target=\"_blank\">code pen</a>.</p>\n\n<p id=\"7\" style=\" \">We're going to rely more on CSS3 transitions rather than Jquery DOM Manipulation and animation effects to achieve this. This is primarily because CSS3 transitions are <a href=\"http://stackoverflow.com/questions/10863000/is-it-better-to-use-jquery-fadein-or-css3-animations\" rel=\"nofollow\" target=\"_blank\">GPU friendly</a> while jQuery is CPU intensive. Also, GPU acceleration is cool! So, our devices handle the previous one better. (Also that I haven't quite explored jQuery animations. There I said it!)</p>\n\n<p id=\"8\" style=\" \">So, here is what we will do. When the page loads, we will bind the click event on each of the annotation buttons for the function which must unroll or rollback the annotations for that respective content. Right now, we don't need to worry about which annotation belongs to which content, since they are cleanly laid out in our markup as siblings to a unique parent (which has a unique data-section-id).</p>\n\n<p id=\"9\" style=\" \">In the registered function, we need to find the parent, and then unhide the sibling with class name ' <code>comment </code>'. The CSS <code>transition </code> property will be used to animate the effect. Simple? But first, let us hide the annotations by default.</p>\n\n<p id=\"10\" style=\" \">Add class ' <code>hidden </code>' to <code>comments-container </code>. We add this class rather than adding a <code>display:none </code> style because toggling class is much simpler and does not interfere with the behaviour of the other classes.</p>\n\n<p id=\"11\" style=\" \">Now, let's get scripting:</p>\n\n<pre class=\"brush: js\">$(document).ready(function(){\n/* Find all annotation toggle buttons and bind the click event to them. */\n$('.comments--toggle').on('click', toggleAnnotations );\n});\n</pre>\n\n<p id=\"12\" style=\" \">Define the <code>toggleAnnotations </code> method:</p>\n\n<pre class=\"brush: js\">var toggleAnnotations = function(e){ /* find the parent with classname 'comments' */ $(this).parent('.comments').children('.comments-container').toggleClass('hidden'); };\n</pre>\n\n<p id=\"13\" style=\" \">Click on the buttons to see. See, simple, ain't it?</p>\n\n<p id=\"14\" style=\" \">Okay, onward! On medium width desktop screens, the article shifts even before we've clicked the annotations bubble. For this one too, it makes more sense to keep that effect in a different stylesheet class rather than manipulating the style element of the <code>commentable-container </code>. Why? Because the effect is supposed to come into play only for a range of screen widths (for medium screens that is), and is not universal.</p>\n\n<p id=\"15\" style=\" \">So, to the overall container with id 'commentable-container', we'll want a class which acts as a flag whether the annotations are visible or not. Lets name it annotations-active. It applies on the article section.</p>\n\n<pre class=\"brush: sass\">&amp;.annotations-active{\n@media(min-width: $screen-md) and (max-width: $screen-lg){\ntransform: translate(-25rem,0);\ntransition: all 1s;        \n}\n}\n</pre>\n\n<p id=\"16\" style=\" \">And update our script function toggleAnnotations() by adding the following:</p>\n\n<pre class=\"brush: js\">/* Add class annotations-active to the parent with ID commentable-container */\n$(this).parents(\"#commentable-container\").toggleClass('annotations-active');\n</pre>\n\n<p id=\"17\" style=\" \">Note the use of <code>parent() </code> and <code>parents() </code> methods. While parent would return only the immediate parent, parents()(will traverse back the entire DOM tree).</p>\n\n<p id=\"18\" style=\" \">Everything toggles just fine, unless we move from one annotation to another. In that case, the previous annotation stays put, and the next one also becomes visible. This is not the desired behaviour. The toggle class is to blame. Now, let us introspect a little. What do we want?</p>\n\n<p id=\"19\" style=\" \">When a user clicks on an annotation box, its respective annotations must unhide, <em>AND</em> the rest of them must hide. On clicking on it again, the annotations must hide again. Also, on clicking on any other annotation box, the current annotations must hide (which is essentially the same as our first line). As a cherry on top, we would want that when a particular annotation is active, its bubble has an active color.</p>\n\n<p id=\"20\" style=\" \">At this point, I'd rather use a state variable than any other logic. So, I'll introduce a variable which will contain the ID of the content for which annotations are currently active. It would also be a good time to enclose all our methods and variables into a single object to avoid writing into someone else's global variables.</p>\n\n<pre class=\"brush: js\">var annotations = {};\nannotations.currentAnnotation = 0;\nannotations.toggleAnnotations = function(e){...};\n</pre>\n\n<p id=\"21\" style=\" \">So anytime an annotation goes active, we update this variable with the ID of its parent container, deriving it from the <code>data-section-id </code>.</p>\n\n<p id=\"22\" style=\" \">Here's our new function:</p>\n\n<pre class=\"brush: js\">annotations.toggleAnnotations = function(e){\n/* \n* If the clicked annotation is the same is the one that was active, we need to close its annotations only,\n* otherwise we must close it and open the currently active's annotations.\n*/\nactiveID = parseInt($(this).parents('.annotation--container').attr('data-section-id'));\n/* Hide all other annotations first */\n$('.comments').children('.comments-container').addClass('hidden');\n/* If we clicked on the same bubble, it must collapse, and we return to initial state */\nif(annotations.currentAnnotation === activeID ){\n/* Remove the higlight class from the bubble: .annotation-highlight */\n$(this).removeClass('annotation-highlight');\n$(this).parents(\"#commentable-container\").removeClass('annotations-active');\nannotations.currentAnnotation = 0;\nreturn;\n}\n/* Else, we've selected a new bubble (and have already hidden everything.)*/\n/* Update state variable */\nannotations.currentAnnotation = parseInt($(this).parents('.annotation--container').attr('data-section-id'));\nconsole.log('Current Annotation is: ' + annotations.currentAnnotation);\n/* find the parent with classname 'comments' */\n$(this).addClass('annotation-highlight');\n$(this).parent('.comments').children('.comments-container').removeClass('hidden');\n/* Add class annotations-active to the parent with ID commentable-container */\nif(!$(this).parents(\"#commentable-container\").hasClass('annotations-active')){\n$(this).parents(\"#commentable-container\").addClass('annotations-active');\n}\n};\n</pre>\n\n<p id=\"23\" style=\" \">We'll explain it tomorrow (tomorrow never comes, read it once; if something is unclear, let me know. I'll redo it.). But there is one issue. When we click on a bubble, we desire that it must stay permanently ON until we click it off. This doesn't seem to be happening. Umm, hmm. A little look at the Element Inspector reveals that the style is being overridden by other styles. Wait, but why?</p>\n\n<p id=\"24\" style=\" \">The theory says, that other rules are more specific to the element. We'll get to it in a moment. But we could always quick fix it first by the sleight of hand? We'll just make the rule more focused on what we are trying to do, by moving the ' <code>annotation-highlight </code>' class into ' <code>comments-toggle </code>'. This also needs another poor change. Now every time we choose another annotation bubble, the first one must fade away. Since we're not storing the previous object in our state, but just its ID, it would be at least 3 lines of code to find the parent with that ID, and then removing the class from its sibling which has the class ' <code>comments-toggle </code>'. Rather, we've resorted to a quick shortcut - remove class from all of the objects. Since we know, as a matter of design that at an instant, only one object will have that class, the effect will apply to only one (though jQuery is supposedly doing it for all, which is much wasted effort). Here's what I think is the bad code which does the job:</p>\n\n<pre class=\"brush: js\">$('.comments--toggle').removeClass('annotation-highlight');\n</pre>\n\n<p id=\"25\" style=\" \">Let's also write that other option by stopping being lazy for a moment:</p>\n\n<pre class=\"brush: js\">$('*[data-section-id=\"'+annotations.currentAnnotation+'\"]').find('.comments--toggle').removeClass('annotation-highlight');\n</pre>\n\n<p id=\"26\" style=\" \">I said it was three lines and it is just one (though they actually are three lines, we've chained them together. :) ) The completed page is shown below:</p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"ogRyaK\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/ogRyaK/\">Annotations Tutorial</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<p id=\"27\" style=\" \">That does it! We're finished with this leg of the tutorial series. One step closer towards our per-paragraph commenting app. In the <a href=\"/C/course/computer-science/django/annotations-tutorial-dynamically-rendering-per-paragraph-annotations/16/\" target=\"_blank\">next tutorial</a>, we will look into how annotations can be dynamically loaded on the page and associated with their parent content blocks, paving our way to loading the annotatons through Ajax calls.</p>\n", "pid_count": " 27"}


Converting Annotations Tutorial: Drawing the per-paragraph comment layout
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this post of per-paragraph commenting app tutorial series, we will create a layout of how annotations will look like when they are rolled out and visible. Here, we first develop the mobile screen view and then the regular screen views using mobile-first design principles.</p>\n\n<hr/>\n<p id=\"2\" style=\" \">In the <a href=\"/C/course/computer-science/django/annotation-tutorial-speech-bubbles/12/\" target=\"_blank\">previous post</a>, we fiddled with CSS3 shapes to create speech bubbles and decided to keep rectangular speech bubbles rather than oval speech bubbles. Now, we use the same markup and extend it further. You can start to tinker <a href=\"http://codepen.io/anshulthakur/pen/yyWYow/\" target=\"_blank\">here.</a></p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"yyWYow\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/yyWYow/\">Annotations Tutorial: Making annotation bubbles</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<hr/>\n<p id=\"3\" style=\" \">So far, we have a layout and signifier sign-posts to show that there are annotations in the form of speech bubbles. Now, we'd like to see how annotations would look like when visible. Here comes a fork: on a <b>large screen</b>, where we have enough estate to show annotations alongside the content, we would like it to appear there. But, this is not going to work for <b>mobile screens</b>. Why? Because if we stuff in both of them in a single row, each of them would either be clipped, or appear smaller than we want. We don't want the user to swipe left right to make annotations, but continue with their flow of downward scroll.</p>\n\n<p class=\"text-center\" id=\"4\" style=\" \"><small><img alt=\"Review commenting in MS Word\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/06/annotation_1_2.png\" style=\" \"/><a href=\"https://islemaster.files.wordpress.com/2010/09/annotation_011.png\" target=\"_blank\">(Image Credits)</a></small></p>\n\n<p id=\"5\" style=\" \">Also, we noticed problems with hovering in the <a href=\"/C/course/computer-science/django/annotation-tutorial-speech-bubbles/12/\" target=\"_blank\">previous post</a> of this tutorial. We'd want to rid our layout of that too. Here is how I propose to do it initially. We wrap each content block and its respective annotations with a <code>div </code> identified by the class name <code>annotation--container </code>, and let its direct descendants float to the left. On small screens, this will cause them to stack on top of each other (or better, we will add a media query to make them relatively positioned block elements).</p>\n\n<p id=\"6\" style=\" \">Let's try it. The markup is transformed to:</p>\n\n<pre class=\"brush: html\">&lt;div data-section=\"1\" class=\"annotation--container clearfix\"&gt;\n&lt;p id=\"1\"&gt;So, here is how we answered them:&lt;/p&gt;\n&lt;div class=\"comments clearfix\"&gt;\n&lt;h3 class=\"comments--toggle rectangular-speech has-annotations\"&gt;&lt;p&gt;15&lt;/p&gt;&lt;/h3&gt;\n&lt;div class=\"comments-container\"&gt;\n&lt;span class=\"comments-container--text\"&gt;Lorem Ipsum &lt;/span&gt;\n&lt;span class=\"comments-container--text\"&gt;Your documentation source should be written as regular Markdown files, \nand placed in a directory somewhere in your project. \nNormally this directory will be named docs and will exist at the top level of your project, \nalongside the mkdocs.yml configuration file. &lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</pre>\n\n<p id=\"7\" style=\" \">We've wrapped our content blocks (&lt;p&gt; &lt;/p&gt; in our case) within &lt;div&gt; elements with class name as \" <code>annotation--container </code>\". The naming scheme is pretty messed up currently, don't worry, we'll sort it out as we go and restore order in our markup. For starters, we are dabbling with the <a href=\"https://en.bem.info/method/\" target=\"_blank\">B.E.M. scheme</a>. For javascript's sake, we'll add a data-section attribute. To ensure that the blocks side up on large screens and stack on smaller ones, we've used the media query as follows:</p>\n\n<pre class=\"brush: sass\">.annotation--container{\nposition: relative;\nwidth: 100%;\n&amp;&gt;*{\nposition: relative;\ndisplay: block;\n@media(min-width: $screen-md){\noverflow: visible;\n}\n}\n</pre>\n\n<p id=\"8\" style=\" \">For large screens, we would want the speech bubble on the top left corner of our annotations, while for mobile screens, somewhere at the right top:</p>\n\n<pre class=\"brush: sass\">.comments--toggle{\ndisplay:none;\nposition: absolute;\nright: 0px;\ntop: -50%;\n@media(min-width: $screen-md){\ntop: 0;\nleft: 0;\nright: auto;\n}\n</pre>\n\n<p id=\"9\" style=\" \">Okay, by default, only the annotations symbol must be visible, and that doesn't require too much space. Rest of the annotation block will become visible only if someone clicks on that annotation button. This will become more evident in the next tutorial when we actually add that interactivity to the page. Currently, we just want to see how it will look on smaller and larger screens when the annotations have been rolled out.</p>\n\n<p id=\"10\" style=\" \">So, we add the following stylesheets:</p>\n\n<pre class=\"brush: sass\">.comments-container{\npadding: 0;\npadding-left: 10%;\nposition: relative;\n/* On larger screens, their widths are smaller, constrained*/\n@media(min-width: $screen-md){\nwidth: 30rem;\npadding: 20px 0 0 40px;\n}\ncolor: lighten($text-color, 40%);\n}\n</pre>\n\n<p id=\"11\" style=\" \">This means that on a larger screen, the annotations will be constrained to a <var>30rem </var> width (on the right side of the text), while for small screens, where they appear under the paragraph, they'll take up the complete width of the container except for the left sided space of <var>10% </var> (to distinguish them from regular content).</p>\n\n<p id=\"12\" style=\" \">Here, we also need to consider the resolutions in between the large and the small. For medium sized desktop screens, if the above settings are in place, then there would be a horizontal scroll <em>and</em> a lot of empty space on the left side of the article block. Now that wouldn't be nice, would it? So, we would like the content to shift leftwards to make space for annotations when user wants to make annotations by clicking on the annotations button. We presume that the user doesn't want to read <em>and</em> make annotations simultaneously. So, we add the following to our overall annotations-container:</p>\n\n<pre class=\"brush: sass\">@media(min-width: $screen-md) and (max-width: $screen-lg){\ntransform: translate(-25rem,0);\ntransition: all 1s;        \n}\n</pre>\n\n<p id=\"13\" style=\" \">In the last leg of this iteration, lets look at the annotations too. They are indistinguishable from regular content. And because they are spans, they aren't stacking. So, let us correct that.</p>\n\n<pre class=\"brush: sass\">.comments-container--text{\ndisplay: block;\nposition: relative;\npadding-top: 20px;\nfont-size: 1.2rem;\n&amp;:first-child{\npadding-top: 5px;\n}\n}\n</pre>\n\n<p id=\"14\" style=\" \">Except for the first annotation, we would like each annotation to leave a top padding of <var>20px </var>, to separate it from its previous annotation. We could have added a bottom margin instead too, and not cared to add the <code>:first-child </code> selector, but then, chances are, we would have needed the <code>:last-child </code> selector to remove the margin from the last element.</p>\n\n<p id=\"15\" style=\" \">How does it look now? I think it looks fine. However, new problems have cropped up. First, the ones with annotations unhidden do not show the hover effects. Second, some annotation symbols still don't persist on hovering around.</p>\n\n<p id=\"16\" style=\" \">We can try altering the <code>z-index </code> of annotations box, but that will cause more pain by making the little squiggles appear above the annotation box. The problem is because we didn't read quite properly how z-indexes are supposed to behave. Here\u2019s an excerpt from <a href=\"http://philipwalton.com/articles/what-no-one-told-you-about-z-index\" target=\"_blank\">Philip Watson's blog</a>:</p>\n\n<blockquote><i>New stacking contexts can be formed on an element in one of three ways:<br/>\n* When an element is the root element of a document (the &lt;html&gt; element)<br/>\n* When an element has a position value other than static and a z-index value other than auto<br/>\n* When an element has an opacity value less than 1</i></blockquote>\n\n<p id=\"17\" style=\" \">Long story short, stacking context is akin to co-ordinate systems, but instead of telling where the object is going to lie in 2D space, it determines their relative positioning in the third dimension (the one with planes projecting out of the screen towards the user). Where were we guilty? The third clause, the gradient property makes the objects have varying opacity, and was the culprit. So, if you can do with no gradients (I know I can), then just removing the gradients will solve the problem. Now they change colors.</p>\n\n<p id=\"18\" style=\" \">The other one is more or less liveable with, for now. Let us tackle it in our <a href=\"/C/course/computer-science/django/annotations-tutorial-adding-user-interactivity-with-jquery/15/\" target=\"_blank\">next section</a> where we add interactivity to them along with responsiveness. Meanwhile, the completed pen is shown below.</p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"jEomEV\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/jEomEV/\">Annotations (Rolled out state)</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n", "pid_count": " 18"}


Converting Annotations Tutorial: Speech bubbles
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this tutorial on per-paragraph commenting, we will design the collapsed annotations view. We will design and evaluate three different types of speech bubbles using only CSS3 techniques and see which one suits our requirements best.</p>\n\n<hr/>\n<p id=\"2\" style=\" \">In the <a href=\"/C/course/computer-science/django/annotations-tutorial-part-2-basic-layout/11/\" target=\"_blank\">previous tutorial</a>, we created the foundations of our page on which annotations app is going to work. We have some part of our markup ready and would be taking over where the last tutorial left off. Now, we'd want to add more markup - the annotations! But before we went ahead and added them up, we'd like to see how they would look when folded. I imagine there should be some little comment bubble on the margin where we want to show that an annotation has been made, or can be made.</p>\n\n<p class=\"text-center\" id=\"3\" style=\" \"><img alt=\"Different types of speech bubbles\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/05/annotation_3_1.png\" style=\" \"/><small><a href=\"http://www.swishzone.com/manuals/max2components/callout_types.png\" target=\"_blank\">(Image Credits)</a></small></p>\n\n<p id=\"4\" style=\" \">Reading from left to right, we'd most likely encounter it on the right hand side. Further, we choose a paragraph as our quanta of commenting, that is, these annotation bubbles will be found in a position relative to the paragraph, not linewise. This is mainly because a &lt;p&gt; is our textual block. Too many spans are causes of severe headaches and a messy soup.</p>\n\n<p id=\"5\" style=\" \">So, we'll place these comment blocks to the right of our article, and will hang them near the top-right edge. Why? Why top? Why not bottom? Well, we can. Okay, chuck it, we will put it in the bottom edge, but on the right side, for now.</p>\n\n<p id=\"6\" style=\" \">That should be simple. We will:</p>\n\n<ul id=\"7\">\n\t<li>add another block element,</li>\n\t<li>make it relatively positioned,</li>\n\t<li>and float the bubble to its right, or probably, fix it to the right.</li>\n</ul>\n\n<h3>Now, how do we make a bubble?</h3>\n\n<p id=\"8\" style=\" \">We would want two states in the bubble:</p>\n\n<ol id=\"9\">\n\t<li>When no annotations have been made, it'd show a '+' sign, which means, add a comment.</li>\n\t<li>When we have some public annotations, it would show the number of annotations on that content block.</li>\n</ol>\n\n<p id=\"10\" style=\" \">Hmm, so, does a circular bubble fit the bill? It has to be large enough to house numbers, but small enough not to be a thorn in the eyes of the readers. We could make each kind of bubble and see which one looks better.</p>\n\n<p id=\"11\" style=\" \">So, lets create:</p>\n\n<ol id=\"12\">\n\t<li>An oval bubble</li>\n\t<li>A rectangular bubble</li>\n</ol>\n\n<p id=\"13\" style=\" \">We'll use this simple CSS3 construction by <a href=\"http://nicolasgallagher.com/pure-css-speech-bubbles/demo\" target=\"_blank\">Nicolas Gallagher</a> for these speech bubbles as inspiration.</p>\n\n<p id=\"14\" style=\" \">First, lets make the central oval part:</p>\n\n<pre class=\"brush: sass\">.oval-speech {\nposition:relative;\nmin-width: 25px;\nmin-height: 20px;\nwidth:auto;\npadding: 0;\nmargin: 0;\ntext-align:center;\ncolor:#fff;\nbackground:#5a8f00;\n/* css3 */\n@include background-gradient(#b8db29, #5a8f00);\n@include border-radius(100%, 100%);\n}\n</pre>\n\n<p id=\"15\" style=\" \">Where, our background-gradient mixin looks like:</p>\n\n<pre class=\"brush: sass\">@mixin background-gradient($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%){\nbackground:-webkit-gradient(linear, 0 $start-percent , 0 $end-percent, from( $start-color ), to( $end-color ));\nbackground:-moz-linear-gradient($start-color, $end-color);\nbackground:-o-linear-gradient($start-color, $end-color);\nbackground:linear-gradient($start-color, $end-color);\nbackground-repeat: repeat-x;\nfilter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down\n}\n</pre>\n\n<p id=\"16\" style=\" \">and border-radius like:</p>\n\n<pre class=\"brush: sass\">@mixin border-radius($x-radius: 0px, $y-radius: 0px ) {\n-webkit-border-top-left-radius:$x-radius $y-radius;\n-webkit-border-top-right-radius:$x-radius $y-radius;\n-webkit-border-bottom-right-radius:$x-radius $y-radius;\n-webkit-border-bottom-left-radius:$x-radius $y-radius;\n//Escape \n-moz-border-radius:#{$x-radius}/#{$y-radius};\n-ms-border-radius:#{$x-radius}/#{$y-radius};\nborder-radius:#{$x-radius}/#{$y-radius};\n}\n</pre>\n\n<p id=\"17\" style=\" \">The curvature of the edges into the form of an oval is achieved by the border radius property, which we've set to 100% in x and 100% in the y direction. Now, because the width of the elements is usually going to be larger than their heights, it is unlikely that the shape will resemble a circle, or worse, a standing oval (with width smaller than height). For the just in case scenario, we've put a minimum limit on the width and height.</p>\n\n<blockquote>HTML and CSS rendering is done like a painter's canvas model. What comes before is like a layer of colour, and the one that comes after it is another layer drawn on the previous one.</blockquote>\n\n<p id=\"18\" style=\" \">Now comes the extended part of the speech bubble which is the actual fun part. Drawing the elephant is relatively easy, but it is quite hard to draw its tail. We will use pseudoselectors to achieve that. To do so, we need to realize that HTML and CSS rendering is done like a painter's canvas model. What comes before is like one layer of colour, and the one that comes after it is another layer drawn on top of the previous one. So, if the previous one was <i>painted</i> blue, and the new one is yellow, the overlapping parts would look green.</p>\n\n<p id=\"19\" style=\" \">Second, what are we going to do with pseudo selectors? We know that we can curve the borders of a content block or DOM object. Also, <a href=\"http://www.sitepoint.com/pure-css3-speech-bubbles/\" target=\"_blank\">this article </a> visually explains how the borer comprises of 4 regions which can together be used to create some shapes.</p>\n\n<p id=\"20\" style=\" \">Things can get tricky on the small hairline shape, so we'll first make bigger ones, to see this pseudoselector method in action. I suggest that you try this out as we go on, you could play with it in the codepen shown below.</p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"WbBQJY\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/WbBQJY/\">WbBQJY</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<pre class=\"brush: html\">&lt;div class=\"solid-block\"&gt;&lt;/div&gt;\n</pre>\n\n<pre class=\"brush: sass\">.solid-block{\nheight: 0px;\nwidth: 0px;\nposition: relative;\nmargin-bottom: 100px;\n}\n</pre>\n\n<p id=\"21\" style=\" \">No content, an empty block, but magic happens outside it. Add some SASS within <code>.solid-block </code>:</p>\n\n<pre class=\"brush: sass\">&amp;:before{\ncontent:\"\";\nposition: absolute;\nbottom: -60px;\nright:0;\nborder: 60px solid black;\nborder-top: 0px solid transparent;\nborder-left: 0px solid transparent;\n}\n&amp;:after{\ncontent:\"\";\nposition: absolute;\nbottom: -60px;\nright:0;\nborder: 60px solid gray;\nborder-top: 0px solid transparent;\nborder-left: 0px solid transparent;\ntransform: translate(-50%,0%);\n}\n</pre>\n\n<p id=\"22\" style=\" \">The '&amp;' sign is an alias for the current container. In our case, <code>&amp; </code> will be replaced by <code>solid-block </code>. Compile the sass. (Or as I like it, I've put my files on watch and sass automatically compiles them on detecting any change).</p>\n\n<p id=\"23\" style=\" \">What do we have? Two 60 pixel high blocks of gray and black colours huddled together where we had nothing moments before.</p>\n\n<p id=\"24\" style=\" \">The <code>:before </code> pseudo selector created a block with no content ( <code>content:\"\" </code>) but with a right and bottom border of <var>60px </var> width and black color. Now, since there is no content, this would get us a box of black color <i>below</i> the line with its width as <var>60px </var> in both right side, and in the bottom. When I say width, it is the x-axis width for the right sided border, and y-axis width in the bottom border, so don't get confused that the bottom looks longer. The <code>:after </code> pseudo selector created a similar block, and because of the transform property, it has been moved <var>50% </var> of its initial position towards the negative x-axis, thus revealing some part of the underlying black block.</p>\n\n<p id=\"25\" style=\" \">Now, we want it to curve. So, let's add some border radius to the <code>:before </code> property:</p>\n\n<pre class=\"brush: sass\">border-bottom-right-radius: 100% 100%;\n</pre>\n\n<p id=\"26\" style=\" \">Reloading the page (or if you are working on the codepen, it would autorefresh) shows that the lower edge of the black block has curved. Now, lets curve the gray block too, by adding the following to <code>:after </code> property:</p>\n\n<pre class=\"brush: sass\">border-bottom-right-radius: 100% 100%;\n</pre>\n\n<p id=\"27\" style=\" \">Alright, if we can just make the gray portion disappear along with whatever it was masking, the section that remains would look like the squiggle under the speech bubble. But it isn't pointed. Hmm, I don't quite get it! I have carefully slid the gray box over the black one and both are exactly identical, then there must be a pointed tip on the lower end. As a workaround, let's increase the <code>y-radius </code> of the gray block.</p>\n\n<pre class=\"brush: sass\">border-bottom-right-radius: 100% 150%;\n</pre>\n\n<p id=\"28\" style=\" \">That does it. There we have, a tiny squiggle which can be place below our chat bubble. Thus, our speech bubble stylesheet will now look like:</p>\n\n<pre class=\"brush: sass\">.oval-speech {\nposition:relative;\nmin-width: 25px;\nmin-height: 20px;\nwidth:auto;\npadding: 0;\nmargin: 0;\ntext-align:center;\ncolor:#fff;\nbackground:#5a8f00;\n/* css3 */\n@include background-gradient(#b8db29, #5a8f00);\n@include border-radius(100%, 100%);\np {\nfont-size:0.7em;\nmargin:0;\npadding:0 5px;  \n}\n/* creates part of the curve */\n&amp;:before {\ncontent:\"\";\nposition:absolute;\nz-index:-1;\nbottom:-10px;\nright:50%;\nbackground:#5a8f00; /* need this for webkit - bug in handling of border-radius */\nborder: 10px solid #5a8f00;\nborder-top: 0px solid transparent;\nborder-left: 0px solid transparent;\n/* css3 */\n@include border-bottom-right-radius(100%,100%);\n/* using translate to avoid undesired appearance in CSS2.1-capabable but CSS3-incapable browsers */\n@include transform-translate(0, -2px);\n}\n/* creates part of the curved pointy bit */\n&amp;:after {\ncontent:\"\";\nposition:absolute;\nz-index:-1;\nbottom:-10px;\nright:50%;\nbackground:#fff;\nborder: 10px solid white;\nborder-top: 0px solid transparent;\nborder-left: 0px solid transparent;\n/* css3 */\n@include border-bottom-right-radius(100%,150%);\n/* using translate to avoid undesired appearance in CSS2.1-capabable but CSS3-incapable browsers */\n@include transform-translate(-50%, -2px);\n}\n}\n</pre>\n\n<p id=\"29\" style=\" \">I'm sure you could make the remaining mixins in a fashion I made for border-radius. Try filling in large values like ' <var>154 </var>', or something and notice how the bubble grows proportionately. The complete pen can be seen <a href=\"http://codepen.io/anshulthakur/pen/yyWYow\" target=\"_blank\">here</a>.</p>\n\n<p id=\"30\" style=\" \">There is one caveat in this technique. Note that we set the color of the <code>:after </code> element to white; well, if the background color isn't white, it will hurt like a sore thumb sticking out of wet socks. That is where I like SASS. We can set a variable for <code>background-color </code>, and then the change would have to be made only to the variable, and everywhere it was used, the values will be reflected.</p>\n\n<p id=\"31\" style=\" \">Now, let us have a look at the rectangular bubble too, before we can make our mind on which one to use.</p>\n\n<p id=\"32\" style=\" \">Just changing the radius of the main bubble makes it rectangular, but then, the squiggle doesn't look too good, does it? Lets try a plain triangle.</p>\n\n<pre class=\"brush: sass\">.rectangular-speech{\nposition:relative;\nmin-width: 25px;\nmin-height: 20px;\nwidth:auto;\npadding: 0;\nmargin: 0;\ntext-align:center;\ncolor:#fff;\nbackground:#5a8f00;\n/* css3 */\n@include background-gradient(#b8db29, #5a8f00);\n@include border-radius(15%, 15%);\np {\nfont-size:0.5em;\nmargin:0;\npadding:0 3px;  \n}\n/* creates part of the curve */\n&amp;:before {\ncontent:\"\";\nposition:absolute;\nz-index:-1;\nbottom:-10px;\nright:30%;\nborder: 10px solid #5a8f00;\nborder-right: 10px solid transparent;\nborder-bottom: 10px solid transparent;\n/* css3 */\n/* using translate to avoid undesired appearance in CSS2.1-capabable but CSS3-incapable browsers */\n@include transform-translate(0, -2px);\n}\n}\n</pre>\n\n<p id=\"33\" style=\" \">Now, that we have both, which one looks better? I asked my buddy sitting next to me and he said the rectangular one. I had liked the rectangular one the moment I had seen one, my mind did a double somersault. So, by a vote of 2-0, we have a winner! But, should you want the other one, you know, it is just a class-name change away.</p>\n\n<p id=\"34\" style=\" \">Okay, in the last leg of this tutorial, let us make them less obtrusive. Currently, they look too bright to be not-noticed even if we don't want to see them. So, here's a new constraint on them. If no annotations have been made thus far on an object, the bubble must not be visible. Also, the bubble with ' <var>+ </var>' sign must be visible slightly only when we hover on the respective content block. If there have been annotations, they will only be slightly visible and only when we hover on them will they get full color.</p>\n\n<p id=\"35\" style=\" \">Sounds right? Let's begin.</p>\n\n<p id=\"36\" style=\" \">First, hide all of them. We will introduce another CSS class name rather than modifying each and every speech shape; by doing this, we ensure that all speech bubbles get that effect, regardless of their shape. Let's call it <code>speech </code>.</p>\n\n<pre class=\"brush: sass\">.speech{\ndisplay: none;\n}\n</pre>\n\n<p id=\"37\" style=\" \">Reload the page, and all bubbles are now gone!</p>\n\n<p id=\"38\" style=\" \">Now, we want to show only those which DO NOT have a ' <var>+ </var>' as content. Now, we have a problem there. There was a <code>contains() </code> property suggested, but did not make it into the CSS3 specs. So, we need more manipulation. We can:</p>\n\n<ol id=\"39\">\n\t<li>Put a specific class to flag that we have annotations or to mark its absense.</li>\n\t<li>Or we could add a data-xxx attribute.</li>\n</ol>\n\n<p id=\"40\" style=\" \">For simplicity sake, we'll do the first. We'll make the blocks with annotations with ' <code>has-annotations </code>' class. With this, we can do away with the ' <code>speech </code>' class too. If it has comments, i.e. ' <code>has-comments </code>' class, we'll hide it.</p>\n\n<pre class=\"brush: sass\">&amp;.has-annotations{\ndisplay:none;\n}\n</pre>\n\n<p id=\"41\" style=\" \">This hides what we wanted to hide. Now, lets change the behaviour of hovering on the ' <var>+ </var>' element. Also, we don't want all of them to look so bright at the outset, but only on hover. So, we can change the default background color to something light. Also, we were setting its background-gradient, so we need to remove that too.</p>\n\n<pre class=\"brush: sass\">background-color: rgba(228, 226, 226, 0.8);\n@include background-gradient(#dcdada, #dcdada);\n</pre>\n\n<p id=\"42\" style=\" \">But wait! The squiggle looks bad. What we want is, we set the color only once and it applies to all of them, right? Right! The squiggles are essentially borders, and we haven't specified the border colors of our parent element (into which the <code>:before </code> and <code>:after </code> will be added to). So, what we can do is, set its color property to the value we set in background-color, and let its descendants inherit that.</p>\n\n<pre class=\"brush: sass\">border-color: rgba(228, 226, 226, 0.8);\n</pre>\n\n<p id=\"43\" style=\" \">Now, it looks fine. So far so good. Now, we want that whenever we hover on top of it, it becomes green. That is done with the <code>:hover </code> property.</p>\n\n<pre class=\"brush: sass\">&amp;:hover{\nbackground-color: rgba(184, 219, 41, 0.8);\n@include background-gradient(#b8db29, #5a8f00);\nborder-color: rgba(110, 131, 24, 0.8);\n}\n</pre>\n\n<p id=\"44\" style=\" \">Looking nice? Sort of. Okay, so, one more thing is left. The ones with annotation count must be visible, and the ones without mustn't, until we hover on top of the content block. So, we need to invert our logic. The has-annotations class is by default, visible, and the one without isn't. That is easy enough for you to do, just set <code>display:block </code> for <code>.has-annotations </code> and <code>none </code> in the default block.</p>\n\n<p id=\"45\" style=\" \">One last effect is to display the ' <var>+ </var>' (add annotation) block when we hover on its parent content object. Currently, there is no simple way to just tell who the preceding element was. Instead, what we can do is to set the chain rule on every content block that is capable of having annotations. If you notice in the markup, the ones which can have annotations have some properties: first, they belong to a parent with ID 'commentable-container', and second, they themselves have a unique ID. So, we can make a rule that the immediate sibling of any content block which is a child of <code>#commentable-container </code> must become visible when we hover on the block.</p>\n\n<pre class=\"brush: sass\">#commentable-container{\n&amp; *[id]:hover + .comments &gt; .comments--toggle, \n&amp; *[id] + .comments:hover &gt; .comments--toggle {\ndisplay: block;\n}\n}\n</pre>\n\n<p id=\"46\" style=\" \">The completed page looks like the pen below</p>\n\n<div class=\"center-block\">\n<p class=\"codepen\" data-default-tab=\"result\" data-height=\"257\" data-slug-hash=\"yyWYow\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/yyWYow/\">yyWYow</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script></div>\n\n<p id=\"47\" style=\" \">This has two immediate issues, one, the hovered element disappears as soon as we hover out. This means we cannot click on it, for the moment we move towards it and hover out of the content block, it disappears (except when we directly transition into it from the top).</p>\n\n<p id=\"48\" style=\" \">Second, on a mobile screen with touch, there is no hover effect, well, because we don't have a mouse there. For now, the invisibility and hover effects will have to go. So, we have to think of something simpler than this hokey-pokey. But that we'll do in the next segment.</p>\n\n<p id=\"49\" style=\" \">This completes our second pass over the layout. We started with a vertically stacked, no-bling kind of content that would work suitably over small as well as big screens. Then, we imagined how and where our annotation icons would have to lie in order to be more obvious and likeable. No annotations have been made thus far, just a symbol to signify that there are some made already, or can be made.</p>\n\n<p id=\"50\" style=\" \">In the <a href=\"/C/course/computer-science/django/annotations-tutorial-drawing-the-per-paragraph-comment-layout/13/\" target=\"_blank\">next tutorial</a>, we will visualize how the annotations must look like in a rolled out state</p>", "pid_count": " 50"}


Converting Annotations Tutorial: Basic Layout
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \">In this tutorial, we will start building the proposed front-end on which our app is going to operate, with a <i>mobile-first</i> methodology to ensure that it looks consistent on all platforms and resolutions. You can look at the final result <a href=\"http://codepen.io/anshulthakur/pen/OPYLop\" target=\"_blank\">here</a> or at the <a href=\"#codepen\">end</a> of this tutorial\n</p>\n<hr/>\n<p id=\"2\" style=\" \">In the <a href=\"/C/course/computer-science/django/annotations-tutorial-part-1-per-paragraph-commenting/10/\">previous tutorial</a>, we discussed what are annotations and how they differ from regular comments. We then discussed the various problems associated with identifying the content for which the annotation was created so that we may link the two later. In this tutorial, we will write the minimal markup of the article on which our annotations will be made. The style sheets are written in SASS which is then converted into CSS, with the emphasis being on application, rather than theory, and of course, over UX Design.\n</p>\n<hr/>\n<p id=\"3\" style=\" \">OK. On to design! We start off from the front end design, trying to create the design as a user would experience it, and we do it with a mobile first design approach. In this approach, we first design for small screens (which must be the simplest) and then progressively add complexity to the layouts\n</p>\n<p class=\"text-center\" id=\"4\" style=\" \"><img alt=\"Mobile first design approach\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/04/annotation_2_1.png\" style=\" \"/><small><a href=\"http://www.internet.ltd.uk/sites/default/files/mobile-first-t.png\">Image Credits</a></small>\n</p>\n<p id=\"5\" style=\" \"><strong>So, what do we want?</strong> We want that little bubbles should be available at the edges of the area where we want to allow such annotations. Because people usually read from left to right (there are a few right-to-left scripts though, we are not catering to them as of now), we\u2019ll put these bubbles on the right margin of our article's area. We\u2019ll refer to that area as <i>\u2018Commentable Container\u2019</i>. What I\u2019m trying to do here is start from the requirements, top down, and gradually move in, towards a full implementation.\n</p>\n<blockquote><b>'User Expectations'</b> create <b>'Requirements'</b> create <b>'Design Architectures'</b> create <b>'Implementations'</b>\n</blockquote>\n<p id=\"6\" style=\" \">So, here is how our basic frontend requirements can be broken down:\n</p>\n<p id=\"7\" style=\" \">We\u2019re designing for:\n</p>\n<ul id=\"8\">\n  <li>Small Screens</li>\n  <li>Large Screens</li>\n</ul>\n<p id=\"9\" style=\" \">Each screen can have:\n</p>\n<ul id=\"10\">\n  <li>Collapsed View</li>\n  <li>Expanded View</li>\n</ul>\n<p id=\"11\" style=\" \">For each of the above views, the following cases apply:\n</p>\n<ul id=\"12\">\n  <li>User not logged in</li>\n  <li>User logged in</li>\n</ul>\n<p id=\"13\" style=\" \">For each of the cases discussed, the following scenarios are possible:\n</p>\n<ul id=\"14\">\n  <li>No Annotations to read</li>\n  <li>Some annotations to read</li>\n  <li>The user tries to make annotation</li>\n</ul>\n<p id=\"15\" style=\" \"><a href=\"/static/static/sandbox/annotations/001_initial.html\" target=\"_blank\">Here</a> is a simple stacked layout. Looks the same in all kinds of screens (Try zooming in and out, or better, try using the device emulator bundled in your browsers). It looks fine except one thing. The text is a bit too spread out for large screens. We don\u2019t want it to look too wide on large screens, but centered, while for small screens, it must occupy the complete width of the screen. <a href=\"http://baymard.com/blog/line-length-readability\" target=\"_blank\"> Research</a> indicates that about 65 to 70 letters is what humans in general are comfortable reading in a line without the line being too short to be abrupt, or too long to render it incomprehensible in a single pass. So, on large screens, we\u2019ll not want more than 65-70 characters.\n</p>\n<p id=\"16\" style=\" \">\n  <mark><em>Note: I\u2019m using SASS for writing my CSS files. One, because it is as easy (or as tough) as writing CSS, and two, because it is less tedious than writing CSS, and is, as its name goes <a href=\"http://sass-lang.com/\" target=\"_blank\">\u2018Syntactically Awesome StyleSheets\u2019</a>.Some of the declarations have been taken from the <a href=\"http://getbootstrap.com/\" target=\"_blank\">Bootstrap 3</a> framework, since that is what we have tinkered for our own needs on the portal too.</em> \n  </mark>\n</p>\n<p id=\"17\" style=\" \">So, initially the CSS was:\n</p>\n<pre class=\"brush: sass\">article{\nwidth:100%;    \nmargin: 0 auto;\nline-height: 1.5;\nletter-spacing: 1px;\nfont-size: 1.5rem;\ntext-align: justify;\n}\n</pre>\n<p id=\"18\" style=\" \">Here, the text looks too much cornered, too much spread out, don\u2019t you think? So, we could add a margin on both sides, by changing the margin property to:\n</p>\n<pre class=\"brush: sass\">margin: 0 10px;\n</pre>\n<p id=\"19\" style=\" \">But, by doing so, we now see horizontal scroll bar and some text moving out of the viewport. So, we fix that by reducing our width in percentages, and still centering them.\n</p>\n<pre class=\"brush: sass\">width:95%;    \nmargin: 0 auto;\n</pre>\n<p id=\"20\" style=\" \">But, this looks too spread out at desktop screens, so, we add a media query for our approximate width on bigger screens:\n</p>\n<pre class=\"brush: sass\">@media(min-width: $screen-md){\nwidth: 60rem;\n}\n</pre>\n<p id=\"21\" style=\" \">\n  <code>rem \n  </code> is size with respect to size of root element (which we\u2019ve set to 14px). This makes the overall width as \n  <var>14 \n  </var>x \n  <var>60 \n  </var>= \n  <var>840 \n  </var>px. That can help deciding the breakpoint too, where we must transition from the rem version to 95%. Anyhow, our \n  <code>$screen-md \n  </code> variable is set to \n  <code>992px \n  </code>, so we\u2019ve transitioned way before that.\n</p>\n<p id=\"22\" style=\" \">The completed code of the page looks like the one in the <a name=\"codepen\">pen below </a>\n</p>\n<div class=\"text-center\">\n  <p class=\"codepen\" data-default-tab=\"result\" data-height=\"316\" data-slug-hash=\"OPYLop\" data-theme-id=\"13781\" data-user=\"anshulthakur\" style=\" \">See the Pen <a href=\"http://codepen.io/anshulthakur/pen/OPYLop/\">Annotations Tutorial (Part 1): Final</a> by Anshul Thakur (<a href=\"http://codepen.io/anshulthakur\">@anshulthakur</a>) on <a href=\"http://codepen.io\">CodePen</a>.\n  </p>\n  <script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\">\n  </script>\n</div>\n<p id=\"23\" style=\" \">Hokay, so this looks fine for small as well as large screens.\n</p>\n<p id=\"24\" style=\" \">Lets move on to the next task. How will annotations look like in small screens, in a collapsed view? That, we will cover in our <a href=\"/C/course/computer-science/django/annotations-tutorial-speech-bubbles/12/\" target=\"_blank\">next tutorial</a>.\n</p>\n", "pid_count": " 24"}


Converting Annotations Tutorial (Part 1): Per-Paragraph Commenting
{"Body": " <p class=\"text-muted\" id=\"1\" style=\" \"><small>In this tutorial series, we walk through the process of creation of our per-paragraph commenting app using Django as our backend, with Javascript and jQuery (ajax) for the front end. In this first tutorial, we discuss various issues and possible solutions of solving this problem of per-paragraph commenting.</small></p>\n\n<p id=\"2\" style=\" \">I like how the comments look like on <a href=\"http://medium.com\" target=\"_blank\">Medium.com</a>. I am a compulsive scribbler when it comes to the corners and margins of hard-copies and <strong>THAT</strong> is something I dearly miss in <i>e</i>-reading, other than the comfort of reading from a book compared to a radiating screen. When I first saw this commenting style on Medium, I liked it right away. That was the time when I had no idea that I\u2019d be doing web development at all (I didn\u2019t know web development).</p>\n\n<p class=\"text-center\" id=\"3\" style=\" \"><img alt=\"Extensive scribbling on margins of a book\" class=\"img-responsive center-block\" src=\"/static/media/images/anshul/2015/04/04/annotations_1_1.jpg\" style=\" \"/> <small><a href=\"https://openreflections.files.wordpress.com/2011/07/annotations.jpg\">Image Credits</a></small></p>\n\n<p id=\"4\" style=\" \">While the efficacy of such <i>\u2018notes\u2019</i> on web articles is a <a href=\"http://www.davidbauer.ch/2013/08/13/annotations-for-articles-are-great-except-when-theyre-not/\" target=\"_blank\">long debated topic</a> with Medium.com Website standing as a colossal corroboration of <i>\u2018it works!\u2019</i>, the arguments blared by horns of the opposing pavillion are just as sound! Notes have their place, but they cannot exactly replace comments. Buuut, they do make the articles personal! For it is totally up to you to comment on one particular paragraph, or a selection of lines, and not on the entire piece. Also, not everyone reads the neatly folded annotations. So, where do they work, and where do they not?</p>\n\n<p id=\"5\" style=\" \">An annotation that is longer than the post itself does not work. For that (if you really intend to do so), we have comments. Plus, if we can control the privacy of annotations, they can really benefit as notes scribbled on a personal book while helping preserve the context of the thought. As a result, I\u2019d want to make one for our project, and now have a working prototype on which you must be reading the post.</p>\n\n<p id=\"6\" style=\" \">I\u2019ll admit that the inspiration is the Medium.com website while the various options of how to go about the problem were evaluated from <a href=\"http://stackoverflow.com/questions/19477494/per-paragraph-commenting-system\" target=\"_blank\">this</a> post on StackOverflow. Then, I found this little project <a href=\"http://aroc.github.io/side-comments-demo/\">\u2018Sidecomments.js\u2019</a> which had a replica of Medium-like commenting system. I tried to use it (since I barely knew JS or jQuery back then) and when it did not work (since it needed Require.js, and perhaps Node.js), I pulled up my sleeves for making one myself in vanilla JS (in a bid to learn JS) and well, for the fun of it.</p>\n\n<p id=\"7\" style=\" \">So, this is what we would like to make:</p>\n\n<ol>\n\t<li id=\"8\">A notes app that allows us to make comments, hereafter referred to as <i>Annotations</i>, on article content, then and there.</li>\n\t<li id=\"9\">Allows the user to tune its privacy, allowing them to make it public, private, visible to self and author, and to a user entered list of friends.</li>\n</ol>\n\n<p id=\"10\" style=\" \">There are certain concerns that this evokes:</p>\n\n<ol id=\"11\">\n\t<li>How do we identify what comments were made on what paragraph?</li>\n\t<li>What if that paragraph or content is deleted?</li>\n\t<li>What if the author of the article wants to respond but only let the author of annotation know?</li>\n</ol>\n\n<p id=\"12\" style=\" \">So, here is how we answered them:</p>\n\n<h3>How do we identify what comments were made on what paragraph?</h3>\n\n<p id=\"13\" style=\" \">We developed an engine in our content app, which assigns unique IDs to each content type on which annotations can be created by the user before it is saved to the database. For every article, these IDs usually start from 1. The obvious limitation being that the we cannot have annotations on a page where more than one content entry is being displayed. I think that is okay, for annotations on blurb listing pages would be absurd for me. Anytime the content gets updated, the previous IDs remain intact (unless the content is deleted, of course). Even in the event of content deletion, the ID is never reused (it is a linear list which constantly increments). The annotations are saved with keys to their article and its paragraph ID.</p>\n\n<h3>What if that paragraph or content is deleted?</h3>\n\n<p id=\"14\" style=\" \">The answer lies not in how we save annotations, but in how we display it. Annotations are displayed in two places on a page. One is where they belong, on the margins of the text. Next, they are also collected down in a separate tab adjacent to the comments tab. If there are some orphaned annotations, you can find them in this annotation bucket. Plus, if you want to treat them as regular comments, so be it, they are here, at the bottom of the page.</p>\n\n<h3>What if the author of the article wants to respond but only let the author of annotation know?</h3>\n\n<p id=\"15\" style=\" \">Since we\u2019ve already proposed that we\u2019d want to maximize tunability of privacy in our projects, scalability of such flexibility is paramount. But we have to make tradeoffs to make something work, and since we value your privacy more than anything, we\u2019ve found our answer in dealing with this problem outside the context of annotations. But to understand the rationale of our solution, you\u2019ll have to understand what annotations mean to us.</p>\n\n<blockquote><em>Annotations are personal interjections, or ponderings that happen while reading an article.</em></blockquote>\n\n<p id=\"16\" style=\" \">Annotations are personal interjections, or ponderings that happen while reading an article. They are not exactly debatable, but can be a short feedback of sorts to authors, something said by a person to a person, and not broadcasted to everyone. You could think of them as review comments before they are published, the usual reviewing stuff that goes around while content writing. The problem here is, not one, but many people will make such annotations.</p>\n\n<p id=\"17\" style=\" \">Thus, annotations that are aimed at starting conversations must result in conversations. However, they mustn\u2019t do so on the post, but in the privacy of message boxes. Say, a person made a public annotation on an article, and somebody wanted to respond to it. He can respond to it via a message. This is possible rather easily because the other person too is a member (since annotations are for signed up users only). This can lead to great friendships and establishing novel social study circles while keeping the article relatively clean of the informal chatter that might then take place. The concept of group messaging shall allow more people to join in the conversation should the two (original people in conversation) oblige unanimously. Unanimous voting in favor is required because even one person who does not oblige will be offended, and if that is so, we have a problem.</p>\n\n<p id=\"18\" style=\" \"><i>[Also know that all of these are pipelined. So, Friendship circles, as of now does not exist on our portal (we\u2019re on our way though!). Thus, you could think of this requirement as a part of a bigger charter, and only the relevant parts would be implemented for now. But rest assured, as and when the segments are added to the portal, the tutorials will also be updated.]</i></p>\n\n<p id=\"19\" style=\" \">So, let us begin with creating our app from the <a href=\"/C/course/computer-science/django/annotations-tutorial-part-2-basic-layout/11/\" target=\"_blank\">next tutorial</a></p>", "pid_count": " 19"}


Converting 5 maxims for a programmer to live by
{"Body": " <p id=\"1\" style=\" \">A day comes in the life of every programmer when they have to refactor someone else's code, or their own code, or fix a bug (heck, programmers spend a lot of time debugging someone else's crap as far as I know) and all hell breaks loose while deadlines tighten their noose around the neck. Here are a few simple practices that one can put to use in order to ease much of the future pain. They're not specific to any programming language, but generalizations which help keep things clean and less cluttered. They WILL not eliminate all your problems, but assuage it a bit, or perhaps a lot.</p>\n<p id=\"2\" style=\" \">When writing an interface, method, function or any boundary to a block (a small system), <strong>never trust anybody</strong>; not even the future you, or the past you. Simply, don't assume. There will always be somebody who will disobey interface specifications, if one exists. We all have bad days. <em><strong>Always, always, always check data consistency.</strong></em><br/>\n<img alt=\"\" src=\"/static/media/images/2014/06/22/buy-sell.jpg\" style=\" \"/><br/>\r\n(Image Source)</p>\n<p id=\"3\" style=\" \"><strong>Document heavily</strong>. No matter if it is absurd, no matter if you're writing just for yourself, not even if your documentation becomes the butt of meme jokes. Tell yourself what you are doing. <strong>Know what you are doing</strong> (isn't that an oxymoron?). Write a symphony, tell a story. Murphy says that an issue will arise the moment you've let the memory of the code recede. Murphy did not explicitly say that, but I'm not saying that Murphy did not say that either. <br/>\n<img alt=\"\" src=\"/static/media/images/2014/06/22/seuss_refactoring.jpg\" style=\" \"/><br/>\r\n(Image Credits)</p>\n<p id=\"4\" style=\" \"><em><strong>Take what you need, not what you want.</strong></em> Especially C coders, I know boilerplate is fun and all, but in the end, if you wanted just the rose, and an elephant came along, holding it in his trunk, you might not satisfy the dependencies. Don't just include the stdio.h if you will never use it (okay, I'm kidding, you may include it, if you know what you are doing). Besides, you do need a minimal boilerplate in web-design till the point you can make your own.<br/>\n<img alt=\"\" src=\"/static/media/images/2014/06/22/boilderplatecode-300x284.jpg\" style=\" \"/><br/>\n</p>\n<p id=\"5\" style=\" \">Don't modularize if a monolith would work. Provided you know what you are doing, always start with a whole, then, depending on the complexity and code reuse factors, break it into smaller reusable wholes. <em><strong>\"</strong><strong>Premature optimization is the root of all evil\"</strong></em>. Don't distribute until it starts to become unmanageable. Don't hold back distribution thinking you can handle anything.<br/>\n<img alt=\"\" src=\"/static/media/images/2014/06/22/engineers-boat.jpg\" style=\" \"/><br/>\r\n(Image Source)</p>\n<p id=\"6\" style=\" \">To take care of the above step more effectively, <strong>do it on paper first</strong> - a pseudo code, verbose descriptions, essays, anything that you are comfortable. Achieve it on paper first (or a notepad) and touch the code screen only when you know what you are going to do it, and how. It has the advantage that design comes first, supporting code comes later, so you'll see the patterns and methods more clearly. As it goes <em><strong>\"Design is the first sign of human intention\"</strong>. </em>Or else, be prepared to run in circles and come out squares (I don't know what that means actually). <br/>\n<img alt=\"\" src=\"/static/media/images/2014/06/22/brain_to_paper.jpg\" style=\" \"/><br/>\r\n(Image Source)</p>\n<p id=\"7\" style=\" \"> But even after all of this, let it be clear that Software Development Cycle will never cease. You <strong>WILL </strong>have to refactor, there <strong>WILL </strong>be bugs, or feature requests, and you <strong>WILL </strong>have to modify your code. It is called evolution in Darwinian terms, it isn't meant to be perfect in the first shot, but should be robust and easy to evolve in the long shot. OOPs has 'ease of evolution' as one of its core philosophies.</p>", "pid_count": " 7"}


Converting Django all-auth - All you need to know!
{"Body": " <p id=\"1\" style=\" \">In this tutorial we will set up and use django-allauth app for third party authentication from various social networking sites like Facebook, Google and Twitter.</p>\n<p id=\"2\" style=\" \">Django-allauth is a great app to streamline both local website login and Social account logins. Django allauth supports all main social providers and most of the steps from registration to login work out of the box. You can read its features and installation steps in the official documentation here. Now, let us see how to set it up and fetch user data from Authentication Providers.</p>\n<p id=\"3\" style=\" \"><strong>Install the django-allauth</strong></p>\n<p id=\"4\" style=\" \"><code>pip install django-allauth</code></p>\n<p id=\"5\" style=\" \">Now<strong> add the app to your project</strong> setting:</p>\n<pre>\r\n<code>\r\n\tINSTALLED_APPS = (\r\n\t\t...\r\n\t\t'allauth',\r\n\t\t'allauth.account',\r\n \t\t'allauth.socialaccount',\r\n\t\t'allauth.socialaccount.providers.facebook',\r\n\t\t'allauth.socialaccount.providers.github',\r\n\t\t'allauth.socialaccount.providers.google',\r\n\t\t'allauth.socialaccount.providers.linkedin',\r\n\t\t'allauth.socialaccount.providers.linkedin_oauth2',\r\n\t\t'allauth.socialaccount.providers.stackexchange',\r\n\t\t'allauth.socialaccount.providers.twitter',\r\n\t\t....\r\n\t)\r\n\r\n\tTEMPLATE_CONTEXT_PROCESSORS = (\r\n \t\t... \r\n\t\t'django.core.context_processors.request',\r\n\t\t'django.contrib.auth.context_processors.auth',\r\n\t\t'allauth.account.context_processors.account',\r\n\t\t'allauth.socialaccount.context_processors.socialaccount',\r\n\t\t...\t\t\r\n\t\t)\r\n\t</code></pre>\n<p id=\"6\" style=\" \"> </p>\n<p id=\"7\" style=\" \">You also need to set the <code>AUTHENTICATION_BACKENDS</code> setting. You should keep admin login by username regardless of allauth</p>\n<pre>\r\n<code>\r\nAUTHENTICATION_BACKENDS = (\r\n\t# Needed to login by username in Django admin, regardless of `allauth`\r\n\t'django.contrib.auth.backends.ModelBackend',\r\n\t# `allauth` specific authentication methods, such as login by e-mail\r\n\t'allauth.account.auth_backends.AuthenticationBackend',\r\n\t)\r\n</code></pre>\n<p id=\"8\" style=\" \"><strong>Set the Redirect url</strong> to root of your website.</p>\n<p id=\"9\" style=\" \"><code>LOGIN_REDIRECT_URL = '/'</code></p>\n<p id=\"10\" style=\" \"> </p>\n<p id=\"11\" style=\" \">Setting for requesting email from social account</p>\n<p id=\"12\" style=\" \"><code>SOCIALACCOUNT_QUERY_EMAIL = True</code></p>\n<p id=\"13\" style=\" \"> </p>\n<p id=\"14\" style=\" \">Social provider specific setting, here I am setting the <em>Facebook authentication</em> procedure to<strong> js_sdk rather than oauth2</strong></p>\n<pre>\r\n<code>\r\nSOCIALACCOUNT_PROVIDERS = {\r\n    'facebook': {\r\n        'SCOPE': ['email', 'publish_stream'],\r\n        'METHOD': 'js_sdk'  # instead of 'oauth2'\r\n  }\r\n}\r\n</code></pre>\n<p id=\"15\" style=\" \">Now <strong>add allauth urls </strong>to you project main <code>urls.py</code>:</p>\n<p id=\"16\" style=\" \"><code>url(r'^accounts/', include('allauth.urls')),</code></p>\n<p id=\"17\" style=\" \"> </p>\n<p id=\"18\" style=\" \"><strong>Sync the database</strong></p>\n<p id=\"19\" style=\" \"><code>python manage.py syncdb</code></p>\n<p id=\"20\" style=\" \"> </p>\n<p id=\"21\" style=\" \">In case you are using south, then you can run:</p>\n<p id=\"22\" style=\" \"><code>python manage.py migrate allauth.socialaccount</code></p>\n<p id=\"23\" style=\" \"> </p>\n<p id=\"24\" style=\" \">Run the same command for all the providers in the installed apps list.</p>\n<p id=\"25\" style=\" \"><code>python manage.py migrate allauth.socialaccount.providers.facebook</code></p>\n<p id=\"26\" style=\" \"> </p>\n<p id=\"27\" style=\" \"><strong>Note: </strong>I would suggest <code>python manage.py syncdb \u2013all</code>, as you would not change the schema of allauth.</p>\n<p id=\"28\" style=\" \"> </p>\n<p id=\"29\" style=\" \">Now you can open the admin page of your website and can see the tables of allauth in Socialaccount section. Here, I will <strong>setup the facebook app</strong> in admin section, for you need to configure the app before using any service providers functionality.</p>\n<p id=\"30\" style=\" \">Create facebook app for your <code>website</code> and configure the <code>client_id</code> and <code>secret</code> in the Social Apps table.</p>\n<p id=\"31\" style=\" \"><img alt=\"Django-Allauth Snapshot of Facebook App Admin Page\" src=\"/static/media/images/2014/08/19/social_app.png\" style=\" \"/></p>\n<p id=\"32\" style=\" \"> </p>\n<p id=\"33\" style=\" \"><strong>Note:<em> </em></strong><em>Make sure your SITE Table points to your Domain. e.g. http://www.piratelearner.com</em></p>\n<p id=\"34\" style=\" \">In the same manner configure all other social account apps.</p>\n<p id=\"35\" style=\" \">Now you can <strong>login to social account facebook with the url</strong></p>\n<p id=\"36\" style=\" \"><code>yourdomain.com/account/login</code></p>\n<p id=\"37\" style=\" \"> </p>\n<p id=\"38\" style=\" \">Currently the template is an ugly one, you can find it at:</p>\n<p id=\"39\" style=\" \"><code>allauth/templates/account/login.html</code></p>\n<p id=\"40\" style=\" \"> </p>\n<p id=\"41\" style=\" \">Sample Code would look something like this</p>\n<pre>\r\n<code>\r\n\t{% load i18n %}\r\n\t{% load account %}\t\r\n\t{% block content %}\r\n\t&lt;h1&gt;{% trans \"Sign In\" %}&lt;/h1&gt;\r\n\t{% if socialaccount.providers %}\r\n\t&lt;p&gt;{% blocktrans with site.name as site_name %}Please sign in with one of your existing third party accounts. {% endblocktrans %}&lt;/p&gt;\r\n\t&lt;div class=\"socialaccount_ballot\"&gt;\r\n \t&lt;ul class=\"socialaccount_providers\"&gt;\r\n\t{% include \"socialaccount/snippets/provider_list.html\" with process=\"login\" %}\r\n\t&lt;/ul&gt;\r\n\t&lt;div class=\"login-or\"&gt;{% trans 'or' %}&lt;/div&gt;\r\n\t&lt;/div&gt;\r\n\t{% include \"socialaccount/snippets/login_extra.html\" %}\r\n\t{% else %}\r\n\t&lt;p&gt;{% blocktrans %}You have not created an account yet {% endblocktrans %}&lt;/p&gt;\r\n\t{% endif %}\r\n\t{% endblock %}\r\n\t</code></pre>\n<p id=\"42\" style=\" \"> </p>\n<p id=\"43\" style=\" \">Now all you need to do is to <strong>access the data from the social account</strong>.</p>\n<p id=\"44\" style=\" \">There are<strong> two ways</strong> to check for social account information during login/sign-up:</p>\n<p id=\"45\" style=\" \">You can catch the signal emitted by allauth to access the information:</p>\n<pre>\r\n<code>\r\n\t\t@receiver(pre_social_login)\r\n\t\tdef CreateProfile(sender, request, sociallogin, **kwargs):\r\n\t\t\t\"\"\"\r\n\t\t\tThis function catches the signal for social login and print the extra information\r\n\t\t\t\"\"\"\r\n\t\t\tprint \"LOGS: Caught the signal--&gt; Printing extra data of the acccount: \\n\", sociallogin.account.extra_data\r\n\t\t</code></pre>\n<p id=\"46\" style=\" \">There is also a provision for sub-classing social account adapter and implement the <em>pre_social_login</em> function if you have Profile table and want to store some information:</p>\n<pre>\r\n<code>\r\n\t\tfrom allauth.account.adapter import DefaultSocialAccountAdapter\r\n\t\tclass MyAdapter(DefaultSocialAccountAdapter):\r\n\t\t\tdef pre_social_login(self, request, sociallogin):\r\n\t\t\t\t\u201c\u201d\u201d\r\n\t\t\t\t\tcheck for data and save what you want.\r\n\t\t\t\t\u201c\u201d\u201d\r\n\t\t\t\tprint \"LOGS: Caught the signal--&gt; Printing extra data of the acccount: \\n\", sociallogin.account.extra_data\r\n\t\t</code></pre>\n<p id=\"47\" style=\" \">and set following in setting.py:</p>\n<p id=\"48\" style=\" \"><code>SOCIALACCOUNT_ADAPTER = 'myapp.my_adapter.MyAdapter`</code></p>\n<p id=\"49\" style=\" \"> </p>\n<p id=\"50\" style=\" \">Now if you want to <strong>access this information in your views</strong> then:</p>\n<pre>\r\n<code>\r\n\taccount_uid = SocialAccount.objects.filter(user_id=<em>request</em>.user.id, provider=<em>'facebook'</em>)\r\n</code></pre>\n<p id=\"51\" style=\" \"> </p>\n<p id=\"52\" style=\" \"><em><strong>Note:</strong> change provider to \u201cgoogle\u201d and \u201ctwitter\u201d for Google+ and Twitter respectively</em></p>\n<p id=\"53\" style=\" \">This will return you the list of facebook account connected to the user currently logged-in.</p>\n<p id=\"54\" style=\" \">You can now extract information from this object using following methods:</p>\n<pre>\r\n<code>\r\n\taccount_uid[0].get_avatar_url()\r\n\taccount_uid[0].extra_data[<em>'username'</em>]\r\n\taccount_uid[0].extra_data[<em>'first_name'</em>]\r\n\taccount_uid[0].extra_data[<em>'last_name'</em>]\r\n\taccount_uid[0].extra_data[<em>'gender'</em>]\r\n\taccount_uid[0].extra_data[<em>'email'</em>]\r\n\taccount_uid[0].extra_data[<em>'link'</em>]\r\n\taccount_uid[0].extra_data[<em>'uid'</em>]\r\n</code></pre>\n<p id=\"55\" style=\" \">If You want to access them in template directly then:</p>\n<pre>\r\n<code>\r\n{% for account in user.socialaccount_set.all %}\r\n        &lt;h2 style=\"text-transform:capitalize;\"&gt;{{ account.provider }} account data&lt;/h2&gt;\r\n        &lt;p&gt;UID: &lt;a href=\"{{account.extra_data.link }}\"&gt;{{ account.uid }}&lt;/a&gt;&lt;/p&gt;\r\n        &lt;p&gt;Username: {{ account.extra_data.username }}&lt;/p&gt;\r\n        &lt;p&gt;First Name: {{ account.extra_data.first_name }}&lt;/p&gt;\r\n        &lt;p&gt;Last Name: {{ account.extra_data.last_name }}&lt;/p&gt;\r\n        &lt;p&gt;EMAIL: {{ account.extra_data.e }}&lt;/p&gt;\r\n        &lt;p&gt;Profile Link: &lt;a href=\"{{ account.extra_data.link }}\"&gt;{{ account.extra_data.link }}&lt;/a&gt;&lt;/p&gt;\r\n        &lt;p&gt;Gender: {{ account.extra_data.gender }}&lt;/p&gt;\r\n        &lt;p&gt;Birthday: {{ account.extra_data.birthday }}&lt;/p&gt;\r\n{% endfor %}\r\n</code>\r\n</pre>\n<p id=\"56\" style=\" \">There are more features in allauth, for example removing the LOG-OUT confirmation page and EMAIL verification procedure, connecting various social account to local account and many other options.</p>\n<p id=\"57\" style=\" \">For this information you can visit the official documentation page of Django-allauth, all settings are well documented there.</p>", "pid_count": " 57"}


Converting What should a 'System' be to a layman?
{"content": "<p style=\"text-align:center\"><span style=\"color:#000000\"><img alt=\"Universe, unblemished and raw\" src=\"/static/media/images/2014/06/04/system1001.jpg\" style=\"height:375px; width:640px\" /></span></p>\r\n\r\n<p><span style=\"color:#000000\">Human beings have an obsession with organising things. Most of us, whether we realise it or not are doing this in our everyday lives. As followers of science (that is why you are here, right?), we believe that everything is covered by a few set of laws and we have reason, and proof to believe so. Often, it is seen as the ultimate objective of science to find that single law which could explain everything. Since the universe is too large to be analysed by a single person or all at the same time, we have so far not been able to produce a convincing unified theory. But we have smaller partial theories which explain a set of things taken from the universe.</span></p>\r\n\r\n<p style=\"text-align:center\"><span style=\"color:#000000\"><img alt=\"Universe divided into smaller compartments\" src=\"/static/media/images/2014/06/04/system2001.jpg\" style=\"height:375px; width:640px\" /></span></p>\r\n\r\n<p><span style=\"color:#000000\">In effect, we are surrounding the phenomena with a box which confines or restricts what is allowed inside the box and what are the rules that govern everything that happens inside the box. The idea is that if we can have small boxes assembled together and the iteratively surround combination of boxes with a bigger box we can eventually arrive at that box which includes everything.</span></p>\r\n\r\n<p><span style=\"color:#000000\">These boxes are units that perform something. These boxes thus take inputs, act on them and produce an effect or an output. Such individual boxes or a combination of these boxes which eventually make a bigger box called a system. When we apply such models of boxes to thinking we call them schools of thought, when we apply them in explaining how the physical world works we call them a theory, when we express them as mathematical functions call them a model. But in a sense all of them are systems which have an underlying order.</span></p>\r\n\r\n<p style=\"text-align:center\"><span style=\"color:#000000\"><img alt=\"Smaller, manageable chunks we shall call systems\" src=\"/static/media/images/2014/06/04/system3001.jpg\" style=\"height:375px; width:640px\" /></span></p>\r\n\r\n<p><span style=\"color:#000000\">Thus a <strong>system </strong>must have a few characteristics:</span></p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><span style=\"color:#000000\">It <em>must be acted upon by something</em> which we call and <strong>input</strong>.</span></p>\r\n\t</li>\r\n\t<li>\r\n\t<p><span style=\"color:#000000\">It <em>must </em>act on that input and <em>do something </em>about it. That what it does is called its <strong>output</strong></span></p>\r\n\t</li>\r\n\t<li>\r\n\t<p><span style=\"color:#000000\">It <em>cannot do anything on its own</em>, that is, there should have been an input that set the ball rolling. A system that acts on its own without any input at any given time in the past or present would be an imaginary one, like the perpetual engines which could be hundred percent efficient. A simple example would be that&nbsp;water does not transport itself back to the top of the mountain on its own. There are external influences which bring about this change and we call that entire model or system the <strong>water cycle</strong>. The sun is expending its energy to evaporate the water, the gradient in temperatures and pressures causes the winds to flow which carry along water in the form of clouds. Sun, thus, can be considered as the motor which drives the world.</span></p>\r\n\t</li>\r\n\t<li>\r\n\t<p><span style=\"color:#000000\">The system must lend itself to observation and analysis within the confines of the box boundaries reasonable accuracy. This means that it must obey some boundary conditions. Thus, a system cannot do everything. That is why fish cannot climb trees and rats usually drown. This also implies that the system can itself be comprised of smaller system, and two or more systems may together form a larger, grander system. It is much like boxes within boxes within boxes within yada yada yada... until we arrive at the biggest box, beyond which we don&#39;t need to know anything, or on the smaller scale, we reach the smallest possible box.</span></p>\r\n\t</li>\r\n</ol>\r\n\r\n<p style=\"text-align:center\"><span style=\"color:#000000\"><img alt=\"\" src=\"http://womaninthrisis.files.wordpress.com/2012/01/boxes-inside-boxes.jpg\" style=\"height:427px; width:640px\" /></span></p>\r\n\r\n<p><span style=\"color:#000000\">The last point, that <strong>the system is consistent within&nbsp;a set of boundary conditions</strong>, in life is the most important feature of the system and sadly is the most ignored point too. This leads to much ambiguity and confusion among learners and incidentally is also the source of most of the trouble in every sphere of life.</span></p>\r\n\r\n<p><span style=\"color:#000000\">In programming, we call them the edge conditions as they are the conditions where the system breaks/stops behaving as it should. We have trouble over international borders. Integration teams are the most beleaguered teams. Mathematicians always strive to stay away from singularities, as the entire mathematics tends to break when it arrives at such boundary conditions. Literature is often misunderstood when things are<em> taken out of context</em>, that context acting as a boundary condition for the sentences to become the argument that they were intended to.&nbsp;</span></p>\r\n\r\n<p><span style=\"color:#000000\">Boundary conditions are not something to be afraid of, but must be given due regard while we&rsquo;re tackling the problems because their established as the boundaries of our understanding. Thus remember this point that every system has its boundary conditions which must be respected and given due regard we want to understand anything and not get into trouble. It will ease much pain, yours and ours too :-)</span></p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n", "pid_count": "0"}


Converting Hello World!
{"content": "<p style=\"text-align:justify\"><span style=\"font-family:times new roman,times,serif\">Welcome to <a href=\"http://piratelearner.com\" target=\"_blank\">PirateLearner</a>!</span></p>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-family:times new roman,times,serif\">This blog post marks our setting sail&nbsp;into the internet as a functional, live project aimed at bringing the best learning from around the world in <strong>pithy</strong>, <strong>digestable</strong>, and <strong>clutterfree</strong>&nbsp;chunks that would&nbsp;help a growing community of passionate learners.&nbsp;By developing a collaborative platform, we plan to off load individual&nbsp;learners from the burden of sifting through the quagmire of information that the internet has become, effectively separating the kernels of knowledge from the chaff.&nbsp;</span></p>\r\n\r\n<blockquote>\r\n<p style=\"text-align:center\"><span style=\"font-size:16px\"><span style=\"font-family:times new roman,times,serif\">&ldquo;A ship is safe in harbor, but that&#39;s not what ships are for.&rdquo;</span></span></p>\r\n\r\n<p style=\"text-align:center\"><span style=\"font-size:16px\"><span style=\"font-family:times new roman,times,serif\">~ William Shedd</span></span></p>\r\n</blockquote>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-family:times new roman,times,serif\">As of now, the vessel has just started to float and sail, but that shouldn&#39;t hinder us from starting to serve our objective and we&#39;ve started to grind our noses in delivering good content along with developing the platform at the same time. This blog post is a declaration of our intention and also an appeal of outreach. This blog will serve as the team blog sharing information on the development status of various modules and other, related information.</span></p>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-family:times new roman,times,serif\">You can read about our vision <a href=\"http://piratelearner.com/en/about/\">here</a>. That is not all and we are in process of making our plans online&nbsp;since we have wholeheartedly accepted the &#39;Open-Source&#39; model;&nbsp;but there is one point worthy of mention:&nbsp;A large bulk of open source projects are not&nbsp;&#39;<em>newbie-friendly&#39;&nbsp;</em>especially for those&nbsp;who want to use these projects as a learning resource. The reason, usually is lack of documentation of the design and the constraints and reasons why those design decisions were made. While most of the now popular open source projects were created by either individuals or a closed group and they knew what they were doing, it isn&#39;t too exciting an opportunity for newcomers.&nbsp;Of our experience in the industria, we&#39;ve come to understand that it does not serve the long term goal of being &#39;open&#39; too well. Decisions, are a matter of context and context changes and if not documented, are likely to suffer the side-effect of becoming ill-competitive.</span></p>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-family:times new roman,times,serif\">Since true learning is what we set as our objective, we&#39;re making our code available through github, and will try to document it extensively from not only the developer&#39;s perspective, but from a learner&#39;s point of view. We also intend to make detailed tutorials on how we made our project, revealing the mistakes (as silly as they are) which will not only augment the documentation but also be an example of the iterative process that software development is. By doing this, we hope, that we will be able to help people interested in learning this art, and that, few of you will want to contribute to our project by becoming a member.</span></p>\r\n\r\n<blockquote>\r\n<p style=\"text-align:center\"><span style=\"font-size:16px\"><span style=\"font-family:times new roman,times,serif\"><em>A good design on paper is&nbsp;worthless if it stays in the laboratory.&nbsp;</em></span></span></p>\r\n</blockquote>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-family:times new roman,times,serif\">It is a challenge we&#39;ve set our for ourselves, to make designs that stand the test of time. That is another reason why they must lie in the public domain.&nbsp;At any point of time, should any detail or design decision befuddle you, feel free to shoot an email at <a href=\"mailto:captain@piratelearner.com?Subject=About%20PirateLearner&quot;\" target=\"_top\">captain(at)piratelearner.com</a>. We will be happy to help. If you want to join in, you are welcome, but be very clear in stating the&nbsp;reasons, to yourself and to us.</span></p>\r\n\r\n<p style=\"text-align:center\"><span style=\"font-family:times new roman,times,serif\"><img alt=\"\" src=\"http://www.photoandwallpapers.com/wp-content/gallery/dark-cloud/dark-clouds-with-boat.jpg\" style=\"height:360px; width:640px\" /></span></p>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-family:times new roman,times,serif\"><a href=\"http://www.photoandwallpapers.com/wp-content/gallery/dark-cloud/dark-clouds-with-boat.jpg\" target=\"_blank\">(Image Source)</a></span></p>\r\n", "pid_count": "0"}


Converting Doing C OOP Style: Structure members as Class Attributes
{"content": "<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">In this post, we are going to discuss a classy technique to assign values to members of a structure in C programming language as if they were some members of a class in some OOP language.</span></span></p>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">You might be knowing that C language does not natively support Object Oriented Programming constructs and that if you are to do programming in an object oriented fashion, you need specialized languages like C++, Python, PHP or Java as the immediate recourse. But, knowing that C++ and Python have been written in C, it cannot be possible that C metamorphosizes into something entirely different when it transitions into C++ or any other High Level Language. If we can do OOP in C++, then there must be some way to do it in C too, though with a lot more effort. Now, I am not a OOPs specialist, infact I don&#39;t understand it very well in implementation due to lack of exposure. I code in C for a living, but somewhere between coding in C and making the code more scalable and modular, I&#39;ve rediscovered the need to have something we now call Objects. I&#39;d tell you the story some other day, today, I just wish to demonstrate how a very close parallel of Object Classes can be developed inside C knowing what we already know and perhaps, a little bit new information. Now remember, it isn&#39;t the final form of <code>class</code> that you might be expecting. C does not support classes natively, (but it can be made to do so through hard, incremental work if the cause is justified). What we&#39;re doing here is the beginning of it, were&#39;re starting to model things what an Object Oriented perspective.</span></span></p>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">The closest parallel to a class from OOP in C is a structure. It is like, classes are structures, with a lot of bling. While I&#39;ll keep the discussion of a more complex class for some other post, I&#39;ll show you three methods in which a structure and its members may be declared. You might be aware of two of them, but the third one is more cool (actually it strikes a middle ground between two methods). Without further ado, lets do it with an example.</span></span></p>\r\n\r\n<p style=\"text-align:center\"><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\"><img alt=\"Book as Struct\" src=\"http://aestheticblasphemy.com/sites/default/files/field/image/book_structure.gif\" /></span></span></p>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Consider the example of representing books as our black box unit of representation. A book has various attributes, or properties which help us identify it without having to look inside, the most generic being:</span></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Title of Book</span></span></li>\r\n\t<li><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Author(s)</span></span></li>\r\n\t<li><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">ISBN</span></span></li>\r\n\t<li><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Genre</span></span></li>\r\n\t<li><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Publisher</span></span></li>\r\n\t<li><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Price</span></span></li>\r\n\t<li><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Edition</span></span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">For the present discussion let us assume there is just one author. First, we represent it as a structure in C.</span></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\"><code>typedef struct book_type {\r\n    unsigned char title[255]; \r\n    unsigned char author[255]; \r\n    unsigned long isbn; \r\n    unsigned char genre[255];\r\n    unsigned char publisher[255]; \r\n    unsigned int price_inr; \r\n    unsigned short edition; \r\n} BOOK;</code></span></span></pre>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Right now, we&#39;ve just described how a structure will look like, i.e. it is a structure definition. We&#39;ve typedef-ed it to save our hands from typing the excruciatingly long &#39;<code>struct book</code>&#39; by merely writing &#39;<code>BOOK</code>&#39;; Not that it makes a difference here, but the names tend to get long as the complexity of the entire project increases and coding etiquette or guidelines come into force. So, now we can start filling in the data using different methods. Lets start with the &#39;here and now&#39; kind of method.</span></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\"><code>BOOK book = {\r\n    &quot;The C Programming Language&quot;, \r\n    &quot;Dennis Ritchie&quot;, \r\n    0131103628, \r\n    &quot;Technical&quot;, \r\n    &quot;Prentice Hall&quot;, \r\n    146, \r\n    2 };</code></span></span></pre>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Here, we are telling everything in sequence and in one place. Short and sweet, but we need to keep in mind the exact order of the members and the data type of that member. This is called the&nbsp;<em><a href=\"http://en.wikipedia.org/wiki/Struct_(C_programming_language)\" target=\"_blank\">C89-style initializers</a>&nbsp;style.&nbsp;</em>But that short and sweet is a bitter pill when the number of structures is large, and so are the number of members in it. Also, data types aren&#39;t the only things that go into a structure. Even functions can (and that, gentlemen and ladies, &nbsp;is how we&#39;ll make a class). So, we&#39;d like a more flexible style. Yep, we have that too; here:</span></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\"><code>BOOK book;\r\nbook.title =&nbsp;&quot;The C Programming Language&quot;;\r\nbook.author =&nbsp;&quot;Dennis Ritchie&quot;;\r\nbook.isbn =&nbsp;&nbsp;0131103628;\r\nbook.genre =&nbsp;&quot;Technical&quot;;\r\nbook.publisher =&nbsp;&quot;Prentice Hall&quot;;\r\nbook.price_inr = 146;\r\nbook.edition = 2;</code></span></span></pre>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Much better? I don&#39;t know if it also has a technical name. But did you see how much did we had to type? Compare it with the previous method. So much for flexibility! But then, there is a third method which is the essential take away from this post. Lets see it first and then discuss it later.</span></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\"><code>BOOK book = {\r\n    .title = &quot;The C Programming Language&quot;&nbsp;,\r\n    .author = &quot;Dennis Ritchie&quot;&nbsp;,\r\n    .isbn = 0131103628&nbsp;,\r\n    .genre = &quot;Technical&quot;,\r\n    .publisher = &quot;Prentice Hall&quot;&nbsp;,\r\n    .price_inr = 146,\r\n    .edition = 2\r\n    };</code></span></span></pre>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">This is the middle ground between the previous two approaches. We don&#39;t need to enter anything in a particular order, and at the same time don&#39;t need to write <code>book.xxx</code> prefix to each attribute of the structure. This is more compact when we already know what to assign to each member. This also comes in handy when we are trying to write pointers to functions which can be thought of as methods of a class.</span></span></p>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">Why do I compare this declaration with OOPs, because when we initialize an object, we populate all of its members and methods (in case of an interface), encapsulation being the key driver for such approach here. By extending this structure using unions or structures whose members are structures, we can implement class inheritance and by having pointer to functions, we can have some degree of encapsulation too. But we&#39;ll keep that discussion for some other day.</span></span></p>\r\n\r\n<p><span style=\"font-size:14px\"><span style=\"font-family:comic sans ms,cursive\">(Image Credits: <a href=\"http://www.re-evolve.net/images/book_structure.gif\">Google</a>)</span></span></p>\r\n", "pid_count": "0"}

